问题,回答,所属分类
Node.js基础面试题阅读指南（必看）,"大家好，我是帅地。
为了方便大家复习，这些面试题的展示采取了右边面试题目，左边答案的方式，方便大家按需查看。
由于手机端不支持这种展示方式，当然，为了手机方便阅读，下面会贴出所有面试题答案链接，不过大家最好在 PC 电脑端阅读哈，相关面试题还会持续更新，尽量补充完善起来，建议收藏帅地的网站哦。
Node.js面试题

ㅤ普通",
请介绍一下node里的模块是什么,"Node中，每个文件模块都是一个对象，它的定义如下：
所有的模块都是 Module 的实例。可以看到，当前模块（module.js）也是 Module 的一个实例。
Node.js面试题

ㅤ普通",
我们知道node导出模块有两种方式，一种是exports.xxx=xxx和Module.exports={}有什么区别吗,"Node.js面试题

ㅤ普通",
"为什么用Nodejs,它有哪些缺点","当然Nodejs也有一些缺点：
Node.js面试题

ㅤ普通",
如何用Node监听80端口,"Node.js面试题

ㅤ普通",
node.js有哪些常用模块,"util是node 里面一个工具模块，node里面几乎所有的模块都会用到这个模块
功能：
1.实现继承这是主要功能
2.实现对象的完整输出
3.实现判断数据类型
path模块
功能：格式规范化路径
fs模块
功能：
1.操作文件
2.操作目录
http模块：用于搭建HTTP服务端和客户端
url模块：用户解析和处理URL字符串
url.parse(将url字符串解析并返回一个url的对象)
url.format(将url对象编程一个url字符串并返回)
url.resolve(将url中的参数用/进行拼接)
zlib模块：提供了用Gzip和Deflate/Inflate实现的压缩功能
socket.io: 实现客服端与服务端之间的实时通信方式
uglify-js: 用来压缩合并js文件
child_process：新建子进程。
querystring：解析URL中的查询字符串。
crypto：提供加密和解密功能。
Node.js面试题

ㅤ普通",
node如何实现异步非阻塞（I/O）,"在node中，I/O（输入输出）是异步非堵塞的关键，I/O操作通常比较耗时但不会独占CPU，典型的I/O比如文件读写，远程数据库读写，网络请求等，如果用同步API来进行I/O操作，在返回结果之前就只能等待，此时阻塞代码会霸占cpu，导致本进程所有代码都等待，而node.js里面的I/O API都是不会霸占CPU的（原因：node中的核心库libuv会将建立的所有I/O操作内容绑定到单个线程上。只要每个事件循环在不同的线程中，就可以运行多个事件循环，libuv为Node.js提供了跨平台、线程池、事件池、异步I/O等能力），所以是非阻塞的。拿JS中的setTimeout来打比方，当用户使用setTimeout时，JS会开辟出一个异步线程池，与主线程分开执行，结果就是之前的代码继续执行，setTimeout的代码延时执行，等成功后再调用主线程的方法
Node.js面试题

ㅤ普通",
node中的exports如何实现的，它和module.exports有什么关系,"exports实现：exports = module.exports = {};就好像是var a = {  } var b = a，看上去没有太大区别，但使用起来却又不同module是一个对象，当我们在控制台输入node并执行，在node中执行module或者执行js文件打印module时会发现以下log
不难发现，module是Module的实例，exports是其中一个属性，也就是说当你在node中执行一个js文件或者使用
require引入模块时，nodejs都会新建一个var module = new Module（），并执行exports = module.exports，
这也就是为什么直接打印exports和exports时，控制台不会报错，如果在node中执行以下代码，就能清楚的看出
这二者的引用关系了
Node.js面试题

ㅤ普通",
谈谈Node.js加载模块机制,"node.js中模块有两种类型：核心模块和文件模块
核心模块直接使用名称获取，文件模块只能按照路径加载（可以省略默认的.js拓展名，不是js文件的话需要显示声明书写）
模块加载规则：
核心模块优先级最高，直接使用名字加载，在有命名冲突的时候首先加载核心模块可通过绝对路径和相对路径查找查找node_modules目录，我们知道在调用 npm install  命令的时候会在当前目录下创建node_module目录(如果不存在) 安装模块，当 require 遇到一个既不是核心模块,又不是以路径形式表示的模块名称时,会试图 在当前目录下的 node_modules 目录中来查找是不是有这样一个模块。如果没有找到,则会 在当前目录的上一层中的 node_modules 目录中继续查找,反复执行这一过程,直到遇到根目录为止
Node.js面试题

ㅤ普通",
Node.js的适用场景,"Node.js面试题

ㅤ普通",
node中的Connect模块是什么，Koa与Express的中间件有什么区别,"Connect是一个node中间件（middleware）框架，每个中间件在http处理过程中通过改写request或（和）response的数据、状态，实现了特定的功能Koa与Express中间件的区别：Express主要基于Connect中间件框架，中间件一个接一个的顺序执行，通常会将 response 响应写在最后一个中间件中而koa主要基于co中间件框架，它的中间件是通过 async await 实现的，中间件执行顺序是“洋葱圈”模型。执行效果类似于Promise.all
Node.js面试题

ㅤ普通",
Node.js有什么优势,"以下是Node.js的主要优点：
Node.js面试题

ㅤ普通",
两个 Node. js程序之间如何交互,"通过fork实现父子程序之间的交互。子程序用 process.on、 process. send访问父程序，父程序用 child.on、 child.send访问子程序。
关于 parent. JS的示例代码如下。
关于 child .js的示例代码如下。
Node.js面试题

ㅤ普通",
解释NodeJS中间件概念,"一般来说，中间件是一个接收请求和响应对象的函数。换句话说，在应用程序的请求-响应循环中，这些函数可以访问各种请求和响应对象以及循环的下一个函数。中间件的 next 功能是借助一个变量来表示的，通常命名为 next。中间件功能最常执行的任务是：
执行任何类型的代码
更新或修改请求和响应对象
完成请求-响应循环
调用堆栈中的下一个中间件
Node.js面试题

ㅤ普通",
Node.js 中 readFile 和 createReadStream 的区别,"Node.js 提供了两种读取和执行文件的方式，分别是使用 readFile 和 CreateStream。readFile() 是一个完全缓冲的进程，只有当完整的文件被推入缓冲区并被读取时才返回响应。这是一个内存密集型过程，在大文件的情况下，处理速度可能非常慢。而 createReadStream 是部分缓冲的，它将整个过程视为一个事件系列。整个文件被分成块，然后被处理并作为响应一一发回。完成后，它们最终会从缓冲区中删除。与 readFile 不同，createReadStream 对于大文件的处理非常有效。
Node.js面试题

ㅤ普通",
有什么nodejs类库可以直接指定时区吗,"主要表现在各种日期数据转换和存储上面。前后端在传递和存储日期时都有几种选择回:
1,unix的时间戳。
2,格式化后的字符串格式，如2012-04-01 10:00:00等。
3,直接存储日期类型.mongoose中。
容易出现问题的是驱动在处理不同日期格式上的差异。
目前在做一个小应用中碰到了这方面的问题。
当然这个也可能是自己的了解不深入，写在这里也希望有更多的人能讲解一下日期、时区等方面的知识。
问题表现在mysql中。mongo的时间是utc时间的，不带时区信息。
如果做数据转换工具得注意这些问题了。
Node.js面试题

ㅤ普通",
请介绍一下Node事件循环的流程,"Node.js面试题

ㅤ普通",
请问实现一个node子进程被杀死，然后自动重启代码的思路,"Node.js面试题

ㅤ普通",
如果使用过koa、egg这两个Node框架，请简述其中的中间件原理，最好用代码表示一下,"koa中间件实现源码大致思路如下：
Node.js面试题

ㅤ普通",
