问题,回答,所属分类
如何编程解决华容道问题？,"小史是一个应届生，虽然学的是电子专业，但是自己业余时间看了很多互联网与编程方面的书，一心想进BAT互联网公司。

今天他就去一家外企面试了。
【面试前】
面试前，小史就收到了中英文的面试邀请。

去外企面试，最好要能够和面试官英语对话。小史除了复习算法之外，赶紧练起了口语。



【面试现场】



面试官给了小史一个问题。（题目已翻译成中文，请自行脑补英文现场）
题目：我有1到8八个数字，放在一个3×3的九宫格里面，那么会留下一个空格。

空格可以和上下左右的数字进行交换，你可以认为空格在移动。如果移动成

则游戏胜利。
你需要完成以下2件事情：
1、给出数据结构来描述这个过程。
2、给你一个初始状态，告诉我能不能胜利，并给出如何移动才能胜利。
这有点像咱们中国的华容道游戏。





小史把他能想到的都写了下来。






【请教大神】
小史回到学校，把面试的情况和计算机学院的吕老师说了一下。



【迷宫问题】






小史：每个点都可以按照右下左上的方向来进行尝试，如果是墙壁，就换一个方向，如果可以走，就往前走到下一点，然后再接着尝试。直到到达终点为止。






吕老师随手又画了一个迷宫。









吕老师：小史，这块并不是往左走，而是回退，退回到上一步。如果我们正在往前搜索，当然不能走回头路。但是当前面没有路的时候，我们就需要返回来，找到之前有可能出现岔路口的地方，再去下一个方向进行搜索。



【华容道问题】







小史：吕老师，我明白了，空格在华容道中移动，就好像我在迷宫里走动一样，每次到一个新的状态，就有几个方向可以搜索，如果是之前碰到过的状态，那就不搜索。





【递归实现回溯】

小史：“回溯”的过程有点像栈的操作。往前走一步就像是入栈，到了死胡同，要往回退，就像是出栈。

吕老师：这个过程确实是栈的过程，但是直接用栈的话，对于你刚刚接触搜索算法，可能编码比较难。其实你可以用递归来实现这个搜索过程。










小史：我在走迷宫的时候，每走一步，就把这一步是往哪走的记录下来，但是碰到了死胡同，往回退的时候，我又把之前记录的步骤最后一步去掉。这样一来，达到终点的时候，我记下来的步骤就是一条从起点到终点的路径了。


小史：记录移动路径，其实就是在真正搜索之前，把方向记录下来，而搜索如果要返回了，则说明该次搜索已经结束，没有结果，应该把该记录去除。





【小史的努力】
吃完烤串，喝完小酒，小史和吕老师休闲地走在回学校的路上。


吕老师笑而不语。
回到宿舍，小史就打开了电脑，手在键盘上飞快地敲了起来。
理解了算法之后，小史的代码写起来也是非常快，不一会儿就写好了：
几个测试用例下来，小史眉头一皱，发现事情并不简单。

小史经过缜密的分析，找到了原因。

我可以判断一下，如果某条路走的步数超过100步，就不再走了，赶紧回退。
小史在search函数中增加了moveArr.size()<100的判断，得到了最终结果。

【深搜和广搜】
第二天，小史得意洋洋地拿着自己的代码去找吕老师秀起来。



小史：现在的算法，没办法保证得到的解法就是最优解，并且它很容易进入复杂的死胡同出不来，有点像一个死钻牛角尖的人。



吕老师：深度优先搜索，会在一个方向一直搜下去，直到这条路走不通，才会考虑第二个方向。

吕老师：广度优先搜索，是先搜索每一个可行方向的第一步，然后再接着搜索每一个可行方向的第二步。以此类推。




小史：这个算法似乎没有“回溯”的必要了，没办法再用递归了吧？而且分头搜索这个方式应该怎么实现呢？

吕老师：你可以将要搜索的初始状态加到一个队列里，然后每次从队列中取出一个状态，往可以前进的方向前进一步，然后再将该状态放到队列。利用队列先进先出的特点，就可以实现广搜的效果。







小史：每一步都记录上一步的状态和这次的方向。这样在达到最终胜利状态的时候，可以找到这个状态的上一步。而上一步又可以找到上上步，这不就是链表么？




理解了算法之后，小史的代码写起来也是非常快，不一会儿就写好了：
写完代码，小史赶紧运行看下最终结果：



一个问题一顿饭，吕老师不亏的。
【饭桌上的闲聊】








PS：这次这篇花费了两周时间以及小史两顿饭钱。如果你看到了这里，并且有所收获的话，可以动动手指转发一下哦，小史和吕老师都会感谢你。
面试现场",
面试现场简介（必读）,"大家好，我是帅地。
面试现场这个专题，重在开拓你的思维，帅地向你保证，每一道题看完，都能让你有所收获，每一篇文章要嘛是帅地自己写的，要嘛是通过别人授权获取的，授权获取的文章，质量绝对也是过关的。
面试现场部分文章来自于「互联网侦察」这个微信公众号，感谢号主的授权。
无论你是 想面试，还是想学习一些算法的思维，那么面试现场的文章，都值得你去仔细阅读。
帅地的愿景就是，把该文章的教程，打造成全网质量最高的编程学习网站，所以会尽最大努力去保证每篇文章的质量，也欢迎你提出意见。
1. 如何判断一个数是否在40亿个整数中？
1. 如何判断一个数是否在40亿个整数中？
2. 如何实现可以获取最小值的栈？
2. 如何实现可以获取最小值的栈？
3. 记一次 shopee 面试：最小栈的最优解
3. 记一次 shopee 面试：最小栈的最优解
4. 为什么要分稳定排序和非稳定排序？
4. 为什么要分稳定排序和非稳定排序？
5. 如何编程解决华容道问题？
5. 如何编程解决华容道问题？
6. 如何找到字符串中的最长回文子串？
6. 如何找到字符串中的最长回文子串？
7. 如何在500w个单词中统计特定前缀的单词有多少个?
7. 如何在500w个单词中统计特定前缀的单词有多少个?
8. 如何在10亿数中找出前1000大的数？
8. 如何在10亿数中找出前1000大的数？
9. 如何编程获得最多的年终红包奖？
9. 如何编程获得最多的年终红包奖？
10. 如何编程解决朋友圈个数问题？
10. 如何编程解决朋友圈个数问题？
11. 如何设计可自学习的五子棋AI？
11. 如何设计可自学习的五子棋AI？
12. 为什么MySQL数据库要用B+树存储索引？
12. 为什么MySQL数据库要用B+树存储索引？
13. 记一道字节跳动面试：变形的链表反转
13. 记一道字节跳动面试：变形的链表反转
14. 记一次手撕算法面试：字节跳动的面试官把我四连击了
14. 记一次手撕算法面试：字节跳动的面试官把我四连击了
15. 记一次阿里笔试：一行代码解决约瑟夫环问题的
15. 记一次阿里笔试：一行代码解决约瑟夫环问题的
16. 记一次阿里面试：面试挂在了 LRU 缓存算法设计上
16. 记一次阿里面试：面试挂在了 LRU 缓存算法设计上
17. 记一次网易笔试：前缀和的应用
17. 记一次网易笔试：前缀和的应用
18. 游戏中的敏感词过滤是如何实现的？
18. 游戏中的敏感词过滤是如何实现的？
19. 如何只用2GB内存从20/40/80亿个整数中找到出现次数最多的数
19. 如何只用2GB内存从20/40/80亿个整数中找到出现次数最多的数
面试现场",
每周打卡做的比较好的成员示例,"我说过，我弄这个计划，就是看看你们的学习速度，以及你们掌握的如何，我会根据你们的情况，给你们提供一些学习的东西，比如你遇到某个问题不大懂，写在计划里，我看到了，可能可以给你一些指点。
有些人同一起点，但是几个月后，这份计划将会看到你这几个月，究竟学了什么
而且我觉得，这种每周/每日记录，会成为一种习惯，哪天自己没学习 会怪怪滴，这可以自发监督自己学习。
反正最重要的就是，让我知道你们的学习状态，当然，还有另外一种作用，就是学员之间，互相鼓励。
这里我展示几个做的比较好的，或许你们可以参考一下哦，写的时候可以写一写感悟之类的，另外就是，很多人差不多同一届的，也可以交流交流
PS：前面编号不准确的话，因为有些人没打卡被移除，编号会发生变化
2. 2023届_xhyang
2. 2023届_xhyang
4. 2023届——Kobe Bryant
4. 2023届——Kobe Bryant
9. 23届-6
9. 23届-6
12. 22届_just wait
12. 22届_just wait
13. 2023届_心有萌虎
13. 2023届_心有萌虎
18. 2023届_wh
18. 2023届_wh
29. 2023届_无尽蔚蓝
29. 2023届_无尽蔚蓝
33. 2023届_孤独时代的罗永浩
33. 2023届_孤独时代的罗永浩
12. 2024届_忆霁昕
12. 2024届_忆霁昕
14. 24届_Spruce.Lau
14. 24届_Spruce.Lau
18. 25届_Lyy 卍4678卍
18. 25届_Lyy 卍4678卍
20. 2025届_秊
20. 2025届_秊
22. 2025届_Qiang
22. 2025届_Qiang
23. 2024届_幸福来敲门
23. 2024届_幸福来敲门
44. 2025届_星月之弦
44. 2025届_星月之弦
49. 24届_Tolkien
49. 24届_Tolkien",
