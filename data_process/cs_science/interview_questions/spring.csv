问题,回答,所属分类
Spring 学习路线,"大家好，我是帅地。
最近有星球的小伙伴问帅地，Spring 学习的相关问题，总结起来就是
Spring 要如何学习以及学到哪个程度？
可能公众号里也有不少人有这个疑问，所以帅地这里简单跟大家说一说这些 Spring 等框架的学习。
不管你有没有了，我说下从 0 学习 spring 路线相关的吧。
我觉得对于框架的学习，首先就是先使用，理解它具有哪些功能，使用场景，之后想好好学的话，就得去深入它的底层原理，一般学习核心功能的源码就可以了，例如 IOC，AOP，事务这些，所以呢，学习路线可以是这样：
1、入门：先入门学习用一下，看看 spring 是个啥东西，具有哪些功能(我觉得这个特别重要)，我推荐看视频快入入门，跟着视频搭建一下环境，之后基于 spring 做个小项目，一般视频都会配套小项目
入门视频推荐：https://www.bilibili.com/video/BV1bA411W7HQ?from=search&seid=2253637188460048780，大概花两天时间就可以看完了
https://www.bilibili.com/video/BV1bA411W7HQ?from=search&seid=2253637188460048780
核心学习知识如下
（1）SpringIOC
（2）SpringAOP
（3）Spring 事务
（4）Spring MVC
（5）Spring Security 权限（马滴，这个面试还被问过两次）
等等。
学的过程中，也可以去看一看官方网文档，英文版的，很多东西都写的非常清楚。
2、看一些核心功能的源码，设计理念：我建议是跟着书或者视频来学习源码，而不是自己 JDK 学，会陷入无底洞，你看完视频之后，我建议你再系统快速翻下书，因为视频会忽略很多细节，而书，我们可以知道很多细节，有助于我们对该框架的理解，不过呢，书中的很多知识，你应该在视频中也看过，所以看起来特别快的，入门书籍可以看《spring实战第五版》，进阶学习源码可以《Spring源码深度剖析第二版》
至于视频的话，我找了 一些，看了一下，百度云里的视频都有点老，2018-2019的，所以就不给大家推荐视频了，如果大家 有好的视频推荐，也可以提供哈。
总之就是，学习这些框架源码，先会使用，理解应用场景，然后从宏观上理解它，之后根据具体的模块，去看它核心功能的源码，例如 IOC容器，事务这些，它底层逻辑是怎么实现的。
至于学习到哪个程度？
如果你是要应付校招的话，那么其实会使用，知道有哪些核心功能以及 IOC，AOP的一些核心原理，用到了哪些设计模式啥的，我觉得就差不多了，大厂面试中，应届生对这方面其实问的很少。
然后如果是社招，那么还是建议好好深入学习一下。
另外，这里也总结了一些框架相关的面试题（附答案）
Spring面试题阅读指南
Spring面试题阅读指南
MyBatis面试题阅读指南
MyBatis面试题阅读指南
 SpringMVC面试题阅读指南
 SpringMVC面试题阅读指南
spring
学习路线",
Spring如何解决循环依赖问题(超详细),"ClassPathXmlApplicationContext：此容器也从一个 XML 文件中加载beans 的定义，这里，你需要正确设置 classpath 因为这个容器将在 classpath 里找 bean 配置。
WebXmlApplicationContext：此容器加载一个 XML 文件，此文件定义了一个 Web 应用的所有 bean。
了解问题的本质再分析问题，往往更利于对问题有更深入的了解和研究。所以我们在分析 Spring 关于循环依赖的源码之前，先要了解下什么是循环依赖。
1. 循环依赖的概念
、
2. 问题体现
3. 问题处理
在这部分的代码中就一个核心目的，我们来自己解决一下循环依赖，方案如下：
这段代码提供了 A、B 两个类，互相有依赖。但在两个类中的依赖关系使用的是 setter 的方式进行填充。也就是只有这样才能避免两个类在创建之初不非得强依赖于另外一个对象。
getBean，是整个解决循环依赖的核心内容，A 创建后填充属性时依赖 B，那么就去创建 B，在创建 B 开始填充时发现依赖于 A，但此时 A 这个半成品对象已经存放在缓存到singletonObjects 中了，所以 B 可以正常创建，在通过递归把 A 也创建完整了。

四、源码分析
1. 说说细节
通过上面的例子我们大概了解到，A和B互相依赖时，A创建完后填充属性B，继续创建B，再填充属性A时就可以从缓存中获取了，如下：

那这个解决事循环依赖的事放到 Spring 中是什么样呢？展开细节！

虽然，解决循环依赖的核心原理一样，但要放到支撑起整个 Spring 中 IOC、AOP 特性时，就会变得复杂一些，整个处理 Spring 循环依赖的过程如下；

2. 处理过程
关于本章节涉及到的案例源码分析，已更新到 github：https://github.com/fuzhengwei/interview – interview-31
https://github.com/fuzhengwei/interview
以下是单元测试中对AB依赖的获取Bean操作，重点在于进入 getBean 的源码跟进；
org.springframework.beans.factory.support.AbstractBeanFactory.java
doGetBean 方法
doCreateBean 方法
getSingleton 三级缓存
综上，是一个处理循环依赖的代码流程，这部分提取出来的内容主要为核心内容，并没与长篇大论的全部拆取出来，大家在调试的时候会涉及的比较多，尽可能要自己根据流程图操作调试几遍。
3. 依赖解析
综上从我们自己去尝试解决循环依赖，学习了循环依赖的核心解决原理。又分析了 Spring 解决的循环依赖的处理过程以及核心源码的分析。那么接下来我们在总结下三级缓存分别不同的处理过程，算是一个总结，也方便大家理解。
1. 一级缓存能解决吗？

2. 二级缓存能解决吗？

3. 三级缓存解决什么？

有了二级缓存都能解决 Spring 依赖了，怎么要有三级缓存呢。其实我们在前面分析源码时也提到过，三级缓存主要是解决 Spring AOP 的特性。AOP 本身就是对方法的增强，是 ObjectFactory<?> 类型的 lambda 表达式，而 Spring 的原则又不希望将此类类型的 Bean 前置创建，所以要存放到三级缓存中处理。
其实整体处理过程类似，唯独是 B 在填充属性 A 时，先查询成品缓存、再查半成品缓存，最后在看看有没有单例工程类在三级缓存中。最终获取到以后调用 getObject 方法返回代理引用或者原始引用。
至此也就解决了 Spring AOP 所带来的三级缓存问题。本章节涉及到的 AOP 依赖有源码例子，可以进行调试
五、总结
spring",
