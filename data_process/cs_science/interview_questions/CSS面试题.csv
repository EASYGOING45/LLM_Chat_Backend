问题,回答,所属分类
CSS 基础面试题阅读指南（必看）,"大家好，我是帅地。
为了方便大家复习，这些面试题的展示采取了右边面试题目，左边答案的方式，方便大家按需查看。
由于手机端不支持这种展示方式，当然，为了手机方便阅读，下面会贴出所有面试题答案链接，不过大家最好在 PC 电脑端阅读哈，相关面试题还会持续更新，尽量补充完善起来，建议收藏帅地的网站哦。
1. css 的渲染层合成是什么 浏览器如何创建新的渲染层
1. css 的渲染层合成是什么 浏览器如何创建新的渲染层
2. css 优先级是怎么计算的
2. css 优先级是怎么计算的
3. css 怎么开启硬件加速(GPU 加速)
3. css 怎么开启硬件加速(GPU 加速)
4. CSS中可继承与不可继承属性有哪些
4. CSS中可继承与不可继承属性有哪些
5. display的属性值及其作用
5. display的属性值及其作用
6. display的block、inline和inline-block的区别
6. display的block、inline和inline-block的区别
7. 隐藏元素的方法有哪些
7. 隐藏元素的方法有哪些
8. link和@import的区别
8. link和@import的区别
9. transition和animation的区别
9. transition和animation的区别
10. display:none与visibility:hidden的区别
10. display:none与visibility:hidden的区别
11. 伪元素和伪类的区别和作用
11. 伪元素和伪类的区别和作用
12. 对requestAnimationframe的理解
12. 对requestAnimationframe的理解
13. 对盒模型的理解
13. 对盒模型的理解
14. 为什么有时候⽤translate来改变位置而不是定位
14. 为什么有时候⽤translate来改变位置而不是定位
15. li 与 li 之间有看不见的空白间隔是什么原因引起的 如何解决
15. li 与 li 之间有看不见的空白间隔是什么原因引起的 如何解决
16. CSS3中有哪些新特性
16. CSS3中有哪些新特性
17. 替换元素的概念及计算规则
17. 替换元素的概念及计算规则
18. 常见的图片格式及使用场景
18. 常见的图片格式及使用场景
19. 对 CSSSprites 的理解
19. 对 CSSSprites 的理解
20. 什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到@3x, @2x这种图片
20. 什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到@3x, @2x这种图片
21. 对line-height 的理解及其赋值方式
21. 对line-height 的理解及其赋值方式
22. CSS 优化和提高性能的方法有哪些
22. CSS 优化和提高性能的方法有哪些
23. CSS预处理器/后处理器是什么 为什么要使用它们
23. CSS预处理器/后处理器是什么 为什么要使用它们
24. ::before 和 :after 的双冒号和单冒号有什么区别
24. ::before 和 :after 的双冒号和单冒号有什么区别
25. 单行、多行文本溢出隐藏
25. 单行、多行文本溢出隐藏
26. Sass、Less 是什么 为什么要使用他们
26. Sass、Less 是什么 为什么要使用他们
27. 对媒体查询的理解
27. 对媒体查询的理解
28. 对 CSS 工程化的理解
28. 对 CSS 工程化的理解
29. 如何判断元素是否到达可视区域
29. 如何判断元素是否到达可视区域
30. z-index属性在什么情况下会失效
30. z-index属性在什么情况下会失效
31. 常见的CSS布局单位
31. 常见的CSS布局单位
32. px、em、rem的区别及使用场景
32. px、em、rem的区别及使用场景
33. 两栏布局的实现
33. 两栏布局的实现
34. 如何根据设计稿进行移动端适配
34. 如何根据设计稿进行移动端适配
35. 对Flex布局的理解及其使用场景
35. 对Flex布局的理解及其使用场景
36. 响应式设计的概念及基本原理
36. 响应式设计的概念及基本原理
37. 为什么需要清除浮动 清除浮动的方式
37. 为什么需要清除浮动 清除浮动的方式
38. 使用 clear 属性清除浮动的原理
38. 使用 clear 属性清除浮动的原理
39. 对BFC的理解，如何创建BFC
39. 对BFC的理解，如何创建BFC
40. 什么是margin重叠问题 如何解决
40. 什么是margin重叠问题 如何解决
41. 元素的层叠顺序
41. 元素的层叠顺序
42. display、float、position的关系
42. display、float、position的关系
43. absolute与fixed共同点与不同点
43. absolute与fixed共同点与不同点
44. 对 sticky 定位的理解
44. 对 sticky 定位的理解
45. 设置小于12px的字体
45. 设置小于12px的字体
46. CSS3新增伪类有那些
46. CSS3新增伪类有那些
47. CSS选择器有哪些 哪些属性可以继承
47. CSS选择器有哪些 哪些属性可以继承
48. margin和padding分别适合什么场景使用
48. margin和padding分别适合什么场景使用
49. png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过webp
49. png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过webp
50. 列举一些CSS框架
50. 列举一些CSS框架
51. 使用CSS Sprites的好处
51. 使用CSS Sprites的好处
52. overflow属性在CSS中被用于什么
52. overflow属性在CSS中被用于什么
53. CSS的特异性是什么意思
53. CSS的特异性是什么意思
54. 什么是块级格式化上下文（BFC），如何工作
54. 什么是块级格式化上下文（BFC），如何工作
55. 这段CSS代码会产生什么影响 {box-sizing：border-box;}
55. 这段CSS代码会产生什么影响 {box-sizing：border-box;}
56. 相对，固定，绝对和静态定位的元素有什么区别
56. 相对，固定，绝对和静态定位的元素有什么区别
57. 什么是文件分割，何时使用
57. 什么是文件分割，何时使用
58. 介绍一下标准的css的盒子模型 低版本IE的盒子模型有什么不同
58. 介绍一下标准的css的盒子模型 低版本IE的盒子模型有什么不同
59. Render Tree和CSSOM Tree的区别
59. Render Tree和CSSOM Tree的区别
60. 重排与重绘
60. 重排与重绘
61. position 中的 relative 和 absolute 的定位原点是什么
61. position 中的 relative 和 absolute 的定位原点是什么
62. float的使用
62. float的使用
63. flex弹性布局
63. flex弹性布局
64. 常见居中方案
64. 常见居中方案
65. 如何居中p 如何居中一个浮动元素 如何让绝对定位的p居中
65. 如何居中p 如何居中一个浮动元素 如何让绝对定位的p居中
66. absolute的containing block计算方式跟正常流有什么不同
66. absolute的containing block计算方式跟正常流有什么不同
67. 制作一个访问量很高的大型网站，你会如何来管理所有CSS文件,js 与图片
67. 制作一个访问量很高的大型网站，你会如何来管理所有CSS文件,js 与图片
68. 视差滚动效果
68. 视差滚动效果
69. css div 垂直水平居中，并完成 div 高度永远是宽度的一半（宽度可以不指定）
69. css div 垂直水平居中，并完成 div 高度永远是宽度的一半（宽度可以不指定）
70. CSS实现自适应正方形、等宽高比矩形
70. CSS实现自适应正方形、等宽高比矩形
71. IE6 BUG的解决方法
71. IE6 BUG的解决方法
CSS面试题

ㅤ普通",
css 的渲染层合成是什么 浏览器如何创建新的渲染层,"在 DOM 树中每个节点都会对应一个渲染对象（RenderObject），当它们的渲染对象处于相同的坐标空间（z 轴
空间）时，就会形成一个 RenderLayers，也就是渲染层。渲染层将保证页面元素以正确的顺序堆叠，这时候就会
出现层合成（composite），从而正确处理透明元素和重叠元素的显示。对于有位置重叠的元素的页面，这个过
程尤其重要，因为一旦图层的合并顺序出错，将会导致元素显示异常。
浏览器如何创建新的渲染层
CSS面试题

ㅤ普通",
css 优先级是怎么计算的,"CSS面试题

ㅤ普通",
css 怎么开启硬件加速(GPU 加速),"浏览器在处理下面的 css 的时候，会使用 GPU 渲染
opacity
filter
will-change
注意！层爆炸，由于某些原因可能导致产生大量不在预期内的合成层，虽然有浏览器的层压缩机制，但是也有很多无法进行压缩的情况，这就可能出现层爆炸的现象（简单理解就是，很多不需要提升为合成层的元素因为某些不当操作成为了合成层）。解决层爆炸的问题，最佳方案是打破 overlap 的条件，也就是说让其他元素不要和合成层元素重叠。简单直接的方式：使用 3D 硬件加速提升动画性能时，最好给元素增加一个 z-index 属性，人为干扰合成的排序，可以有效减少创建不必要的合成层，提升渲染性能，移动端优化效果尤为明显。

CSS面试题

ㅤ普通",
CSS中可继承与不可继承属性有哪些,"一、无继承性的属性
二、有继承性的属性
CSS面试题

ㅤ普通",
display的属性值及其作用,"CSS面试题

ㅤ普通",
display的block、inline和inline-block的区别,"（1）block： 会独占一行，多个元素会另起一行，可以设置width、height、margin和padding属性；
（2）inline： 元素不会独占一行，设置width、height属性无效。但可以设置水平方向的margin和padding属
性，不能设置垂直方向的padding和margin；
（3）inline-block： 将对象设置为inline对象，但对象的内容作为block对象呈现，之后的内联对象会被排列在同
一行内。
对于行内元素和块级元素，其特点如下：
（1）行内元素
（2）块级元素
CSS面试题

ㅤ普通",
隐藏元素的方法有哪些,"CSS面试题

ㅤ普通",
link和@import的区别,"两者都是外部引用CSS的方式，它们的区别如下：
CSS面试题

ㅤ普通",
transition和animation的区别,"CSS面试题

ㅤ普通",
伪元素和伪类的区别和作用,"总结： 伪类是通过在元素选择器上加入伪类改变元素状态，而伪元素通过对元素的操作进行对元素的改变。
CSS面试题

ㅤ普通",
对requestAnimationframe的理解,"实现动画效果的方法比较多，Javascript 中可以通过定时器 setTimeout 来实现，CSS3 中可以使用 transition 和
animation 来实现，HTML5 中的 canvas 也可以实现。除此之外，HTML5 提供一个专门用于请求动画的API，那
就是 requestAnimationFrame，顾名思义就是请求动画帧。
MDN对该方法的描述：

  window.requestAnimationFrame() 告诉浏览器——你希望执行一个动画，并且要求浏览器在下次重绘之前调用指定的回调函数更新动画。该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行。

语法： window.requestAnimationFrame(callback);  其中，callback是下一次重绘之前更新动画帧所调用的
函数(即上面所说的回调函数)。该回调函数会被传入DOMHighResTimeStamp参数，它表示
requestAnimationFrame() 开始去执行回调函数的时刻。该方法属于宏任务，所以会在执行完微任务之后再去执
行。
取消动画： 使用cancelAnimationFrame()来取消执行动画，该方法接收一个参数——requestAnimationFrame默
认返回的id，只需要传入这个id就可以取消动画了。
优势：
setTimeout执行动画的缺点：它通过设定间隔时间来不断改变图像位置，达到动画效果。但是容易出现卡顿、抖
动的现象；原因是：
CSS面试题

ㅤ普通",
对盒模型的理解,"CSS3中的盒模型有以下两种：标准盒子模型、IE盒子模型   盒模型都是由四个部分组成的，分别是margin、border、padding和content。
标准盒模型和IE盒模型的区别在于设置width和height时，所对应的范围不同：
可以通过修改元素的box-sizing属性来改变元素的盒模型：
CSS面试题

ㅤ普通",
为什么有时候⽤translate来改变位置而不是定位,"translate 是 transform 属性的⼀个值。改变transform或opacity不会触发浏览器重新布局（reflow）或重绘
（repaint），只会触发复合（compositions）。而改变绝对定位会触发重新布局，进而触发重绘和复合。
transform使浏览器为元素创建⼀个 GPU 图层，但改变绝对定位会使用到 CPU。 因此translate()更⾼效，可以缩
短平滑动画的绘制时间。 ⽽translate改变位置时，元素依然会占据其原始空间，绝对定位就不会发⽣这种情况。
CSS面试题

ㅤ普通",
li 与 li 之间有看不见的空白间隔是什么原因引起的 如何解决,"浏览器会把inline内联元素间的空白字符（空格、换行、Tab等）渲染成一个空格。为了美观，通常是一个<li>放
在一行，这导致<li>换行后产生换行字符，它变成一个空格，占用了一个字符的宽度。
解决办法：
（1）为<li>设置float:left。不足：有些容器是不能设置浮动，如左右切换的焦点图等。
（2）将所有<li>写在同一行。不足：代码不美观。
（3）将<ul>内的字符尺寸直接设为0，即font-size:0。不足：<ul>中的其他字符尺寸也被设为0，需要额外重新设定其他字符尺寸，且在Safari浏览器依然会出现空白间隔。
（4）消除<ul>的字符间隔letter-spacing:-8px，不足：这也设置了<li>内的字符间隔，因此需要将<li>内的字符间隔设为默认letter-spacing:normal。
CSS面试题

ㅤ普通",
CSS3中有哪些新特性,"CSS面试题

ㅤ普通",
替换元素的概念及计算规则,"通过修改某个属性值呈现的内容就可以被替换的元素就称为“替换元素”。
替换元素除了内容可替换这一特性以外，还有以下特性：
替换元素的尺寸从内而外分为三类：
这三层结构的计算规则具体如下： （1）如果没有CSS尺寸和HTML尺寸，则使用固有尺寸作为最终的宽高。
（2）如果没有CSS尺寸，则使用HTML尺寸作为最终的宽高。 （3）如果有CSS尺寸，则最终尺寸由CSS属性决
定。 （4）如果“固有尺寸”含有固有的宽高比例，同时仅设置了宽度或仅设置了高度，则元素依然按照固有的宽高
比例显示。 （5）如果上面的条件都不符合，则最终宽度表现为300像素，高度为150像素。 （6）内联替换元素
和块级替换元素使用上面同一套尺寸计算规则。
CSS面试题

ㅤ普通",
常见的图片格式及使用场景,"（1）BMP，是无损的、既支持索引色也支持直接色的点阵图。这种图片格式几乎没有对数据进行压缩，所以BMP
格式的图片通常是较大的文件。
（2）GIF是无损的、采用索引色的点阵图。采用LZW压缩算法进行编码。文件小，是GIF格式的优点，同时，GIF
格式还具有支持动画以及透明的优点。但是GIF格式仅支持8bit的索引色，所以GIF格式适用于对色彩要求不高同时
需要文件体积较小的场景。
（3）JPEG是有损的、采用直接色的点阵图。JPEG的图片的优点是采用了直接色，得益于更丰富的色彩，JPEG非
常适合用来存储照片，与GIF相比，JPEG不适合用来存储企业Logo、线框类的图。因为有损压缩会导致图片模糊，
而直接色的选用，又会导致图片文件较GIF更大。
（4）PNG-8是无损的、使用索引色的点阵图。PNG是一种比较新的图片格式，PNG-8是非常好的GIF格式替代
者，在可能的情况下，应该尽可能的使用PNG-8而不是GIF，因为在相同的图片效果下，PNG-8具有更小的文件体
积。除此之外，PNG-8还支持透明度的调节，而GIF并不支持。除非需要动画的支持，否则没有理由使用GIF而不
是PNG-8。
（5）PNG-24是无损的、使用直接色的点阵图。PNG-24的优点在于它压缩了图片的数据，使得同样效果的图片，
PNG-24格式的文件大小要比BMP小得多。当然，PNG24的图片还是要比JPEG、GIF、PNG-8大得多。
（6）SVG是无损的矢量图。SVG是矢量图意味着SVG图片由直线和曲线以及绘制它们的方法组成。当放大SVG图
片时，看到的还是线和曲线，而不会出现像素点。SVG图片在放大时，不会失真，所以它适合用来绘制Logo、
Icon等。
（7）WebP是谷歌开发的一种新图片格式，WebP是同时支持有损和无损压缩的、使用直接色的点阵图。从名字
就可以看出来它是为Web而生的，什么叫为Web而生呢？就是说相同质量的图片，WebP具有更小的文件体积。现
在网站上充满了大量的图片，如果能够降低每一个图片的文件大小，那么将大大减少浏览器和服务器之间的数据传
输量，进而降低访问延迟，提升访问体验。目前只有Chrome浏览器和Opera浏览器支持WebP格式，兼容性不太
好。
CSS面试题

ㅤ普通",
对 CSSSprites 的理解,"CSSSprites（精灵图），将一个页面涉及到的所有图片都包含到一张大图中去，然后利用CSS的 background-
image，background-repeat，background-position属性的组合进行背景定位。
优点：
缺点：
CSS面试题

ㅤ普通",
"什么是物理像素，逻辑像素和像素密度，为什么在移动端开发时需要用到@3x, @2x这种图片","以 iPhone XS 为例，当写 CSS 代码时，针对于单位 px，其宽度为 414px & 896px，也就是说当赋予一个 DIV元素
宽度为 414px，这个 DIV 就会填满手机的宽度；
而如果有一把尺子来实际测量这部手机的物理像素，实际为 1242*2688 物理像素；经过计算可知，
1242/414=3，也就是说，在单边上，一个逻辑像素=3个物理像素，就说这个屏幕的像素密度为 3，也就是常说的
3 倍屏。
对于图片来说，为了保证其不失真，1 个图片像素至少要对应一个物理像素，假如原始图片是 500300 像素，那么
在 3 倍屏上就要放一个 1500900 像素的图片才能保证 1 个物理像素至少对应一个图片像素，才能不失真。  当然，也可以针对所有屏幕，都只提供最高清图片。虽然低密度屏幕用不到那么多图片像素，而且会因为下载多余
的像素造成带宽浪费和下载延迟，但从结果上说能保证图片在所有屏幕上都不会失真。
还可以使用 CSS 媒体查询来判断不同的像素密度，从而选择不同的图片:
CSS面试题

ㅤ普通",
对line-height 的理解及其赋值方式,"（1）line-height的概念：
（2）line-height 的赋值方式：
CSS面试题

ㅤ普通",
CSS 优化和提高性能的方法有哪些,"加载性能：
（1）css压缩：将写好的css进行打包压缩，可以减小文件体积。
（2）css单一样式：当需要下边距和左边距的时候，很多时候会选择使用 margin:top 0 bottom 0；但margin-
bottom:bottom;margin-left:left;执行效率会更高。
（3）减少使用@import，建议使用link，因为后者在页面加载时一起加载，前者是等待页面加载完成之后再进行
加载。
选择器性能：
（1）关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）。CSS选
择符是从右到左进行匹配的。当使用后代选择器的时候，浏览器会遍历所有子元素来确定是否是指定的元素等等；
（2）如果规则拥有ID选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不
会浪费时间去匹配它们了）。
（3）避免使用通配规则，如*{}计算次数惊人，只对需要用到的元素进行选择。
（4）尽量少的去对标签进行选择，而是用class。
（5）尽量少的去使用后代选择器，降低选择器的权重值。后代选择器的开销是最高的，尽量将选择器的深度降到
最低，最高不要超过三层，更多的使用类来关联每一个标签元素。
（6）了解哪些属性是可以通过继承而来的，然后避免对这些属性重复指定规则。
渲染性能：
（1）慎重使用高性能属性：浮动、定位。
（2）尽量减少页面重排、重绘。
（3）去除空规则：｛｝。空规则的产生原因一般来说是为了预留样式。去除这些空规则无疑能减少css文档体
积。
（4）属性值为0时，不加单位。
（5）属性值为浮动小数0.**，可以省略小数点之前的0。
（6）标准化各种浏览器前缀：带浏览器前缀的在前。标准属性在后。
（7）不使用@import前缀，它会影响css的加载速度。
（8）选择器优化嵌套，尽量避免层级过深。
（9）css雪碧图，同一页面相近部分的小图标，方便使用，减少页面的请求次数，但是同时图片本身会变大，使
用时，优劣考虑清楚，再使用。
（10）正确使用display的属性，由于display的作用，某些样式组合会无效，徒增样式体积的同时也影响解析性
能。
（11）不滥用web字体。对于中文网站来说WebFonts可能很陌生，国外却很流行。web fonts通常体积庞大，而
且一些浏览器在下载web fonts时会阻塞页面渲染损伤性能。
可维护性、健壮性：
（1）将具有相同属性的样式抽离出来，整合并通过class在页面中进行使用，提高css的可维护性。
（2）样式与内容分离：将css代码定义到外部css中。
CSS面试题

ㅤ普通",
CSS预处理器/后处理器是什么 为什么要使用它们,"预处理器， 如：less，sass，stylus，用来预编译sass或者less，增加了css代码的复用性。层级，
mixin， 变量，循环， 函数等对编写以及开发UI组件都极为方便。
后处理器， 如： postCss，通常是在完成的样式表中根据css规范处理css，让其更加有效。目前最常做的是给
css属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。
css预处理器为css增加一些编程特性，无需考虑浏览器的兼容问题，可以在CSS中使用变量，简单的逻辑程
序，函数等在编程语言中的一些基本的性能，可以让css更加的简洁，增加适应性以及可读性，可维护性等。
其它css预处理器语言：Sass（Scss）, Less, Stylus, Turbine, Swithch css, CSS Cacheer, DT Css。
使用原因：
CSS面试题

ㅤ普通",
::before 和 :after 的双冒号和单冒号有什么区别,"（1）冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素。
（2）::before就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于dom之中，只存在在页面之中。
注意： :before和 :after 这两个伪元素，是在CSS2.1里新出现的。起初，伪元素的前缀使用的是单冒号语
法，但随着Web的进化，在CSS3的规范里，伪元素的语法被修改成使用双冒号，成为::before、::after。
CSS面试题

ㅤ普通",
单行、多行文本溢出隐藏,"注意：由于上面的三个属性都是 CSS3 的属性，没有浏览器可以兼容，所以要在前面加一个-webkit- 来兼容一部分浏览器。
CSS面试题

ㅤ普通",
Sass、Less 是什么 为什么要使用他们,"他们都是 CSS 预处理器，是 CSS 上的一种抽象层。他们是一种特殊的语法/语言编译成 CSS。 例如 Less 是一种动
态样式语言，将 CSS 赋予了动态语言的特性，如变量，继承，运算， 函数，LESS 既可以在客户端上运行 (支持 IE
6+, Webkit, Firefox)，也可以在服务端运行 (借助 Node.js)。
为什么要使用它们？
CSS面试题

ㅤ普通",
对媒体查询的理解,"媒体查询由⼀个可选的媒体类型和零个或多个使用媒体功能的限制了样式表范围的表达式组成，例如宽度、⾼度和
颜色。媒体查询，添加自CSS3，允许内容的呈现针对⼀个特定范围的输出设备而进行裁剪，而不必改变内容本
身，适合web网页应对不同型号的设备而做出对应的响应适配。
媒体查询包含⼀个可选的媒体类型和满足CSS3规范的条件下，包含零个或多个表达式，这些表达式描述了媒体特
征，最终会被解析为true或false。如果媒体查询中指定的媒体类型匹配展示文档所使用的设备类型，并且所有的
表达式的值都是true，那么该媒体查询的结果为true。那么媒体查询内的样式将会生效。
简单来说，使用 @media 查询，可以针对不同的媒体类型定义不同的样式。@media 可以针对不同的屏幕尺寸设
置不同的样式，特别是需要设置设计响应式的页面，@media 是非常有用的。当重置浏览器大小的过程中，页面
也会根据浏览器的宽度和高度重新渲染页面。
CSS面试题

ㅤ普通",
对 CSS 工程化的理解,"CSS 工程化是为了解决以下问题：
以下三个方向都是时下比较流行的、普适性非常好的 CSS 工程化实践：
基于这三个方向，可以衍生出一些具有典型意义的子问题，这里我们逐个来看：
（1）预处理器：为什么要用预处理器？它的出现是为了解决什么问题？
预处理器，其实就是 CSS 世界的“轮子”。预处理器支持我们写一种类似 CSS、但实际并不是 CSS 的语言，然后把
它编译成 CSS 代码：

那为什么写 CSS 代码写得好好的，偏偏要转去写“类 CSS”呢？这就和本来用 JS 也可以实现所有功能，但最后却写
React 的 jsx 或者 Vue 的模板语法一样——为了爽！要想知道有了预处理器有多爽，首先要知道的是传统 CSS 有
多不爽。随着前端业务复杂度的提高，前端工程中对 CSS 提出了以下的诉求：
编码优化上：我们希望能写出结构清晰、简明易懂的 CSS，需要它具有一目了然的嵌套层级关系，而不是无差
别的一铺到底写法；我们希望它具有变量特征、计算能力、循环能力等等更强的可编程性，这样我们可以少写
一些无用的代码；
可维护性上：更强的可编程性意味着更优质的代码结构，实现复用意味着更简单的目录结构和更强的拓展能
力，这两点如果能做到，自然会带来更强的可维护性。
这三点是传统 CSS 所做不到的，也正是预处理器所解决掉的问题。预处理器普遍会具备这样的特性：
（2）PostCss：PostCss 是如何工作的？我们在什么场景下会使用 PostCss？

它和预处理器的不同就在于，预处理器处理的是 类CSS，而 PostCss 处理的就是 CSS 本身。Babel 可以将高版本
的 JS 代码转换为低版本的 JS 代码。PostCss 做的是类似的事情：它可以编译尚未被浏览器广泛支持的先进的 CSS
语法，还可以自动为一些需要额外兼容的语法增加前缀。更强的是，由于 PostCss 有着强大的插件机制，支持各
种各样的扩展，极大地强化了 CSS 的能力。
PostCss 在业务中的使用场景非常多：
（3）Webpack 能处理 CSS 吗？如何实现？ Webpack 能处理 CSS 吗：
如何用 Webpack 实现对 CSS 的处理：
在实际使用中，css-loader 的执行顺序一定要安排在 style-loader 的前面。因为只有完成了编译过程，才可以对
css 代码进行插入；若提前插入了未编译的代码，那么 webpack 是无法理解这坨东西的，它会无情报错。
CSS面试题

ㅤ普通",
如何判断元素是否到达可视区域,"以图片显示为例：

CSS面试题

ㅤ普通",
z-index属性在什么情况下会失效,"通常 z-index 的使用是在有两个重叠的标签，在一定的情况下控制其中一个在另一个的上方或者下方出现。z-
index值越大就越是在上层。z-index元素的position属性需要是relative，absolute或是fixed。
z-index属性在下列情况下会失效：
CSS面试题

ㅤ普通",
常见的CSS布局单位,"常用的布局单位包括像素（px），百分比（%），em，rem，vw/vh。
（1）像素（px）是页面布局的基础，一个像素表示终端（电脑、手机、平板等）屏幕所能显示的最小的区域，
像素分为两种类型：CSS像素和物理像素：
（2）百分比（%），当浏览器的宽度或者高度发生变化时，通过百分比单位可以使得浏览器中的组件的宽和高随
着浏览器的变化而变化，从而实现响应式的效果。一般认为子元素的百分比相对于直接父元素。
（3）em和rem相对于px更具灵活性，它们都是相对长度单位，它们之间的区别：em相对于父元素，rem相对于根元素。
（4）vw/vh是与视图窗口有关的单位，vw表示相对于视图窗口的宽度，vh表示相对于视图窗口高度，除了vw和
vh外，还有vmin和vmax两个相关的单位。
vw/vh 和百分比很类似，两者的区别：
CSS面试题

ㅤ普通",
px、em、rem的区别及使用场景,"三者的区别：
使用场景：
CSS面试题

ㅤ普通",
两栏布局的实现,"一般两栏布局指的是左边一栏宽度固定，右边一栏宽度自适应，两栏布局的具体实现：
CSS面试题

ㅤ普通",
如何根据设计稿进行移动端适配,"移动端适配主要有两个维度：
为了能让页面的尺寸自适应，可以使用 rem，em，vw，vh 等相对单位。
CSS面试题

ㅤ普通",
对Flex布局的理解及其使用场景,"Flex是FlexibleBox的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为Flex
布局。行内元素也可以使用Flex布局。注意，设为Flex布局以后，子元素的float、clear和vertical-align属性将
失效。采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，
称为Flex项目（flex item），简称”项目”。容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴
（cross axis），项目默认沿水平主轴排列。
以下6个属性设置在容器上：
以下6个属性设置在项目上：
简单来说： flex布局是CSS3新增的一种布局方式，可以通过将一个元素的display属性值设置为flex从而使它
成为一个flex容器，它的所有子元素都会成为它的项目。一个容器默认有两条轴：一个是水平的主轴，一个是与主
轴垂直的交叉轴。可以使用flex-direction来指定主轴的方向。可以使用justify-content来指定元素在主轴上的排列
方式，使用align-items来指定元素在交叉轴上的排列方式。还可以使用flex-wrap来规定当一行排列不下时的换行
方式。对于容器中的项目，可以使用order属性来指定项目的排列顺序，还可以使用flex-grow来指定当排列空间有
剩余的时候，项目的放大比例，还可以使用flex-shrink来指定当排列空间不足时，项目的缩小比例。
CSS面试题

ㅤ普通",
响应式设计的概念及基本原理,"响应式网站设计（Responsive Web design）是一个网站能够兼容多个终端，而不是为每一个终端做一个特定的
版本。
关于原理： 基本原理是通过媒体查询（@media）查询检测不同的设备屏幕尺寸做处理。 关于兼容： 页面头部必
须有mate声明的viewport。
CSS面试题

ㅤ普通",
为什么需要清除浮动 清除浮动的方式,"浮动的定义： 非IE浏览器下，容器不设高度且子元素浮动时，容器高度不能被内容撑开。 此时，内容会溢出
到容器外面而影响布局。这种现象被称为浮动（溢出）。
浮动的工作原理：
浮动元素可以左右移动，直到遇到另一个浮动元素或者遇到它外边缘的包含框。浮动框不属于文档流中的普通流，
当元素浮动之后，不会影响块级元素的布局，只会影响内联元素布局。此时文档流中的普通流就会表现得该浮动框
不存在一样的布局模式。当包含框的高度小于浮动框的时候，此时就会出现“高度塌陷”。
浮动元素引起的问题？
清除浮动的方式如下：
CSS面试题

ㅤ普通",
使用 clear 属性清除浮动的原理,"使用clear属性清除浮动，其语法如下：
如果单看字面意思，clear:left 是“清除左浮动”，clear:right 是“清除右浮动”，实际上，这种解释是有问题的，因为
浮动一直还在，并没有清除。
官方对clear属性解释：“元素盒子的边不能和前面的浮动元素相邻”，对元素设置clear属性是为了避免浮动元素对
该元素的影响，而不是清除掉浮动。
还需要注意 clear 属性指的是元素盒子的边不能和前面的浮动元素相邻，注意这里“前面的”3个字，也就是clear属
性对“后面的”浮动元素是不闻不问的。考虑到float属性要么是left，要么是right，不可能同时存在，同时由于clear
属性对“后面的”浮动元素不闻不问，因此，当clear:left有效的时候，clear:right必定无效，也就是此时clear:left等
同于设置clear:both；同样地，clear:right如果有效也是等同于设置clear:both。由此可见，clear:left和clear:right
这两个声明就没有任何使用的价值，至少在CSS世界中是如此，直接使用clear:both吧。
一般使用伪元素的方式清除浮动：
clear属性只有块级元素才有效的，而::after等伪元素默认都是内联水平，这就是借助伪元素清除浮动影响时需要
设置display属性值的原因。
CSS面试题

ㅤ普通",
对BFC的理解，如何创建BFC,"先来看两个相关的概念：
块格式化上下文（Block Formatting Context，BFC）是Web页面的可视化CSS渲染的一部分，是布局过程中生成
块级盒子的区域，也是浮动元素与其他元素的交互限定区域。
通俗来讲：BFC是一个独立的布局环境，可以理解为一个容器，在这个容器中按照一定规则进行物品摆放，并且不
会影响其它环境中的物品。如果一个元素符合触发BFC的条件，则BFC中的元素布局不受外部影响。
创建BFC的条件：
BFC的特点：
BFC的作用：
左侧设置float:left，右侧设置overflow: hidden。这样右边就触发了BFC，BFC的区域不会与浮动元素发生
重叠，所以两侧就不会发生重叠，实现了自适应两栏布局。
CSS面试题

ㅤ普通",
什么是margin重叠问题 如何解决,"问题描述： 两个块级元素的上外边距和下外边距可能会合并（折叠）为一个外边距，其大小会取其中外边距值大
的那个，这种行为就是外边距折叠。需要注意的是，浮动的元素和绝对定位这种脱离文档流的元素的外边距不会折
叠。重叠只会出现在垂直方向。
计算原则： 折叠合并后外边距的计算原则如下：
解决办法： 对于折叠的情况，主要有两种：兄弟之间重叠和父子之间重叠 （1）兄弟之间重叠
（2）父子之间重叠
CSS面试题

ㅤ普通",
元素的层叠顺序,"层叠顺序，英文称作 stacking order，表示元素发生层叠时有着特定的垂直显示顺序。下面是盒模型的层叠规则：

上图，由上到下分别是： （1）背景和边框：建立当前层叠上下文元素的背景和边框。 （2）负的z-index：当前
层叠上下文中，z-index属性值为负的元素。 （3）块级盒：文档流内非行内级非定位后代元素。 （4）浮动盒：
非定位浮动元素。 （5）行内盒：文档流内行内级非定位后代元素。 （6）z-index:0：层叠级数为0的定位元素。
（7）正z-index：z-index属性值为正的定位元素。
注意: 当定位元素z-index:auto，生成盒在当前层叠上下文中的层级为 0，不会建立新的层叠上下文，除非是
根元素。
CSS面试题

ㅤ普通",
display、float、position的关系,"（1）首先判断display属性是否为none，如果为none，则position和float属性的值不影响元素最后的表现。
（2）然后判断position的值是否为absolute或者fixed，如果是，则float属性失效，并且display的值应该被设置
为table或者block，具体转换需要看初始转换值。
（3）如果position的值不为absolute或者fixed，则判断float属性的值是否为none，如果不是，则display的值则
按上面的规则转换。注意，如果position的值为relative并且float属性的值存在，则relative相对于浮动后的最终位
置定位。
（4）如果float的值为none，则判断元素是否为根元素，如果是根元素则display属性按照上面的规则转换，如果
不是，则保持指定的display属性值不变。
总的来说，可以把它看作是一个类似优先级的机制，”position:absolute”和”position:fixed”优先级最高，有它存在
的时候，浮动不起作用，’display’的值也需要调整；其次，元素的’float’特性的值不是”none”的时候或者它是根元
素的时候，调整’display’的值；最后，非根元素，并且非浮动元素，并且非绝对定位的元素，’display’特性值同设
置值。
CSS面试题

ㅤ普通",
absolute与fixed共同点与不同点,"共同点：
不同点：
CSS面试题

ㅤ普通",
对 sticky 定位的理解,"sticky 英文字面意思是粘贴，所以可以把它称之为粘性定位。语法：position: sticky; 基于用户的滚动位置来定
位。
粘性定位的元素是依赖于用户的滚动，在 position:relative 与 position:fixed 定位之间切换。它的行为就像
position:relative; 而当页面滚动超出目标区域时，它的表现就像 position:fixed;，它会固定在目标位置。元素
定位表现为在跨越特定阈值前为相对定位，之后为固定定位。这个特定阈值指的是 top, right, bottom 或 left 之
一，换言之，指定 top, right, bottom 或 left 四个阈值其中之一，才可使粘性定位生效。否则其行为与相对定位相
同。
CSS面试题

ㅤ普通",
设置小于12px的字体,"在谷歌下css设置字体大小为12px及以下时，显示都是一样大小，都是默认12px。
解决办法：
CSS面试题

ㅤ普通",
CSS3新增伪类有那些,"p:first-of-type 选择属于其父元素的首个元素
p:last-of-type 选择属于其父元素的最后元素
p:only-of-type 选择属于其父元素唯一的元素
p:only-child 选择属于其父元素的唯一子元素
p:nth-child(2) 选择属于其父元素的第二个子元素
:enabled :disabled 表单控件的禁用状态。
:checked 单选框或复选框被选中。
CSS面试题

ㅤ普通",
CSS选择器有哪些 哪些属性可以继承,"CSS选择符：id选择器(#myid)、类选择器(.myclassname)、标签选择器(div, h1, p)、相邻选择器(h1 + p)、子选择
器（ul > li）、后代选择器（li a）、通配符选择器（*）、属性选择器（a[rel=”external”]）、伪类选择器
（a:hover, li:nth-child）
可继承的属性：font-size, font-family, color
不可继承的样式：border, padding, margin, width, height
优先级（就近原则）：!important > [ id > class > tag ]
!important 比内联优先级高
CSS面试题

ㅤ普通",
margin和padding分别适合什么场景使用,"何时使用margin：
需要在border外侧添加空白
空白处不需要背景色
上下相连的两个盒子之间的空白，需要相互抵消时。
何时使用padding：
需要在border内侧添加空白
空白处需要背景颜色
上下相连的两个盒子的空白，希望为两者之和。
兼容性的问题：在IE5 IE6中，为float的盒子指定margin时，左侧的margin可能会变成两倍的宽度。通过改变
padding或者指定盒子的display：inline解决。
CSS面试题

ㅤ普通",
png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过webp,"png是便携式网络图片（Portable Network Graphics）是一种无损数据压缩位图文件格式.优点是：压缩比高，色
彩好。 大多数地方都可以用。
jpg是一种针对相片使用的一种失真压缩方法，是一种破坏性的压缩，在色调及颜色平滑变化做的不错。在www
上，被用来储存和传输照片的格式。
gif是一种位图文件格式，以8位色重现真色彩的图像。可以实现动画效果.
webp格式是谷歌在2010年推出的图片格式，压缩率只有jpg的2/3，大小比png小了45%。缺点是压缩的时间更久
了，兼容性不好，目前谷歌和opera支持。
CSS面试题

ㅤ普通",
列举一些CSS框架,"Bootstrap：是美国Twitter公司的设计师Mark Otto和Jacob Thornton合作基于HTML、CSS、JavaScript 开发的简
洁、直观、强悍的前端开发框架，使得 Web 开发更加快捷。Bootstrap提供了优雅的HTML和CSS规范，它即是由
动态CSS语言Less写成。
Layui：是一款采用自身模块规范编写的前端 UI 框架，遵循原生 HTML/CSS/JS 的书写与组织形式，门槛极低，拿
来即用。其外在极简，体积轻盈，组件丰盈，非常适合界面的快速开发。
ElementUI：一套为开发者、设计师和产品经理准备的基于 Vue 2.0的桌面端组件库。
antd：是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。开箱即用的高质量
React 组件，全链路开发和设计工具体系，数十个国际化语言支持。
CSS面试题

ㅤ普通",
使用CSS Sprites的好处,"利用CSS Sprites能很好地减少网页的http请求，从而大大的提高页面的性能，这也是CSS Sprites最大的优点，也
是其被广泛传播和应用的主要原因；
CSS Sprites能减少图片的字节，曾经比较过多次3张图片合并成1张图片的字节总是小于这3张图片的字节总和。
解决了网页设计师在图片命名上的困扰，只需对一张集合的图片上命名就可以了，不需要对每一个小元素进行命
名，从而提高了网页的制作效率。
更换风格方便，只需要在一张或少张图片上修改图片的颜色或样式，整个网页的风格就可以改变。维护起来更加方
便。
CSS面试题

ㅤ普通",
overflow属性在CSS中被用于什么,"overflow 属性规定当内容溢出元素框时发生的事情。
这个属性定义溢出元素内容区的内容会如何处理。如果值为 scroll，不论是否需要，用户代理都会提供一种滚动机
制。因此，有可能即使元素框中可以放下所有内容也会出现滚动条。
可能的值：
overflow: auto;如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。
overflow: hidden;内容会被修剪，并且其余内容是不可见的。
overflow: scroll;内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。
overflow: visible;默认值。内容不会被修剪，会呈现在元素框之外。
CSS面试题

ㅤ普通",
CSS的特异性是什么意思,"如果有两条或两条以上指向同一元素的冲突 CSS 规则，则浏览器将遵循一些原则来确定哪一条是最具体的，并因
此胜出。
将特异性（specificity）视为得分/等级，能够确定最终将哪些样式声明应用于元素。
每个选择器在特异性层次结构中都有其位置。以下四种类别定义了选择器的特异性级别：
1、行内样式 – 行内（内联）样式直接附加到要设置样式的元素。
2、ID – ID 是页面元素的唯一标识符，例如 #navbar。
3、类、属性和伪类 – 此类别包括 .classes、[attributes] 和伪类，例如：:hover、:focus 等。
4、元素和伪元素 – 此类别包括元素名称和伪元素，比如 h1、div、:before 和 :after。
CSS面试题

ㅤ普通",
什么是块级格式化上下文（BFC），如何工作,"1.规范解释
块格式化上下文（Block Formatting Context，BFC）是Web页面的可视化CSS渲染的一部分，是布局过程中生成
块级盒子的区域，也是浮动元素与其他元素的交互限定区域。
2.通俗解释：
BFC 是一个独立的布局环境,可以理解为一个容器,在这个容器中按照一定规则进行物品摆放,并且不会影响其它环境
中的物品。
如果一个元素符合触发BFC的条件，则该元素中的布局不受外部影响。
浮动元素会创建BFC，所以浮动元素内部子元素主要受浮动元素影响，两个浮动元素之间是互不影响的。
3.创建方式：
根元素或包含根元素的元素
浮动元素 float ＝ left | right 或 inherit（≠ none）
绝对定位元素 position ＝ absolute 或 fixed
display ＝ inline-block | flex | inline-flex | table-cell 或 table-caption
overflow ＝ hidden | auto 或 scroll (≠ visible)
CSS面试题

ㅤ普通",
这段CSS代码会产生什么影响 {box-sizing：border-box;},"默认情况下，元素具有box-sizing：应用了content-box，并且仅考虑了内容大小。
box-sizing：边框更改了元素的宽度和高度的计算方式，边框和填充也包括在计算中。
元素的高度由内容的高度+垂直填充+垂直边框宽度计算得出。
元素的宽度是通过内容的宽度+水平填充+水平边框宽度来计算的。
在我们的盒子模型中，考虑到填充物和边框，与设计人员实际如何想象网格中的内容产生了更好的共鸣。
CSS面试题

ㅤ普通",
相对，固定，绝对和静态定位的元素有什么区别,"定位元素是计算的位置属性是relative, fixed, absolute and static。
静态static
默认位置；默认为0。元素将像往常一样流入页面。top，right，bottom，left和z-index属性不适用。
相对relative
元素的位置相对于自身进行了调整，而没有更改布局（因此，如果没有放置元素，将为元素留出一定的空隙）。
绝对absolute
元素从页面流中删除，并且相对于其最接近的祖先（如果有）或相对于初始包含块而定位在指定的位置。绝对定位
的盒子可以有边距，并且不会与其他任何边距一起折叠。这些元素不会影响其他元素的位置。
固定 fixed
将元素从页面流中移除，并将其放置在相对于视口的指定位置，并且在滚动时不会移动。
粘性sticky
粘性定位是相对定位和固定定位的混合。将该元素视为相对位置，直到它超过指定的阈值为止，此时将其视为固定
位置。
CSS面试题

ㅤ普通",
什么是文件分割，何时使用,"良好的CSS架构的应该有合理的文件组织。整体文件适合单独的开发人员或非常小的项目。对于大型项目（具有多
种布局和内容类型的站点，或在同一设计框架下具有多个品牌的站点），使用模块化方法并将CSS拆分为多个文件
更为明智。
跨文件拆分CSS可以更轻松地将任务打包给团队。一个开发人员可以处理与排版相关的样式，而另一个开发人员可
以专注于开发网格组件。团队可以合理地分工并提高整体生产率。
这是一个虚拟的CSS结构：
reset.css：重置和规范化样式；颜色，边框或字体相关的声明
typography.css：标题和正文文本的字体，粗细，行高，大小和样式
layouts.css：管理页面布局和分段（包括网格）的样式
forms.css：表单控件和标签的样式
list.css：特定于列表的样式
table.css：表格专用样式
carousel.css：轮播组件所需的样式
accordion.css：手风琴组件的样式
CSS面试题

ㅤ普通",
介绍一下标准的css的盒子模型 低版本IE的盒子模型有什么不同,"标准模型由四部分组成：
模型区分：
标准表型指的是设置box-sizing为content-box的盒子模型，一般width,height指的是content的宽高。IE盒模型指
的是box-sizing为border-box的盒子。宽高的计算是content+padding+border;
CSS面试题

ㅤ普通",
Render Tree和CSSOM Tree的区别,"① 浏览器把获取到的html代码解析成一个DOM树，html中的每个标签都是DOM树中的一个节点，根节点就是我们常用的document对象。
② DOM树里面包含了所有的html标签，包括display:none;隐藏，还有用JS动态添加的元素等。
CSSOM树
CSS下载完之后对CSS进行解析，解析成CSS对象，然后把CSS对象组装起来，构建CSSOM树
Render Tree
① CSSOM树和DOM树连接在一起(一 一对应)形成一个Render Tree，渲染树用来计算可见元素的布局并且作
为将像素渲染到屏幕上的过程的输入。
② 渲染树会忽略display: none;的元素
CSS面试题

ㅤ普通",
重排与重绘,"当浏览器发现某个部分发生了变化影响了布局，需要倒回去重新渲染。

  添加、删除可见的DOM元素
  元素位置改变、尺寸改变、内容改变
  页面初始化、resize事件等

重绘repaint
改变某个元素的背景色、文字颜色、边框颜色等影响周围或内部布局的属性时，屏幕的一部分要重画，但元素的几何尺寸不变
注意：
① 回流必定引起重绘，而重绘不一定会引起回流
② display: none;的节点不会被加入渲染树，而visibility: hidden;会被加入渲染树
③ display:none;会触发回流；visibility: hidden;会触发重绘
CSS面试题

ㅤ普通",
position 中的 relative 和 absolute 的定位原点是什么,"CSS面试题

ㅤ普通",
float的使用,"属性定义元素在哪个方向浮动。以往这个属性总应用于图像，使文本围绕在图像周围，不过在 CSS 中，任何元素
都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元素。具体如下：
float造成的效果使元素本身变成了类似于inline-block的元素使包裹它的元素忽略它的高度，即父元素没有了高度
如：给子元素box设置了height:100px;此时的父元素height也是100px。float的影响float使元素脱离了文档流按
照指定的方向发生了移动，直到它的外边缘碰到包含框或者另一个浮动的边框为止。浮动只会影响他后面的元素，
如果上面的元素不浮动，他也不会上去的 如果父元素太窄，无法容纳所有的浮动元素，无法容纳的浮动元素会换
行显示。以换行的那个元素为基准，如果有浮动元素的高度大于换行的那个元素，那么当换行元素换行时会被高的
那个元素”卡住”5.清除浮动影响的方式
CSS面试题

ㅤ普通",
flex弹性布局,"1.设置盒子的display属性为flex，或者line-flex，其对应还有六个css属性，分别为：
1）flex-direction：设置子元素的排列方式（row，column，row-reverse，column-reverse）
2）flex-warp：设置子元素的是否换行（nowarp，warp，warp-reverse）
3）flex-flow：flex-direction和flex-warp的缩写，默认为row nowarp
4）justify-content：设置子元素的水平排列方式（flex-start，flex-end，center，span-around，span-between）
5）align-items：设置子元素的垂直方式（flex-start，flex-end，center，stretch，baseline）
6）align-content：设置多个轴线的排列方式（flex-start，flex-end，center，spand-around，spand-between，stretch）
\2. 对应的子元素项目也拥有自身的六个css属性，分别为：
1）order：设置元素的排列权重 值越大越在后
2）flex-grow：设置元素的放大比例
3）flex-shrink：设置元素的缩小比例
4）flex-basis：设置多余空间项目主轴所占比例空间
5）flex：flex-grow和flex-shrink和flex-basis的缩写方式 默认为0 1 auto
6）align-self：设置子元素自己的垂直排列方式，默认为盒子的align-items的值
:warning:：设置flex布局后，子元素的float，clear，vertical-align都无效
CSS面试题

ㅤ普通",
常见居中方案,"行内元素垂直居中：vertical-align：middle并设置父级元素的行高为父级元素的高度
固定宽度的元素 水平居中使用：magin：0 auto
flex弹性布局：设置justify-content：center水平居中，align-items：垂直居中
通过padding属性进行垂直居中
设置父级元素为：display：table-cell，vertical-align：middle
通过伪元素设置垂直居中：设置父级元素一个伪元素 并设置其为inline-block，同时设置vertical-align：middle
高度确定的时候：绝对定位+margin来垂直居中
高度不确定的时候：绝对定位+transform，具体为：设置需要垂直居中的元素为：position：absolute，top：50%，transform：translateY(-50%)
通过flex-duration：column来垂直居中：display：flex，flex-duration：column，justify-content：center
水平垂直居中方法：
2.绝对定位+margin实现垂直水平居中，需要知道子元素高宽度
绝对定位+transform实现垂直水平居中，可以不知道子元素高宽度：position：absolute；top：50%；left：50%；transform：translate（-50%，-50%）
使用display为table，子元素为display：table-cell；vertical-align：center；text-align：center子子元素设置为vertical-align：center
使用父元素的伪元素进行垂直居中（父元素需要知道高度），设置伪元素的高度为100%，并设置vertical-align：middle，display：inline-block；子元素设置vertical-align：center；display：inline-block（子元素水平居中可以采用text-align：center或者margin：0 auto）
子元素设置为margin：auto；position：absolute；top：0；left：0；right：0；bottom：0；
CSS面试题

ㅤ普通",
如何居中p 如何居中一个浮动元素 如何让绝对定位的p居中,"p：
浮动元素的上下左右居中：
绝对定位的左右居中：
CSS面试题

ㅤ普通",
absolute的containing block计算方式跟正常流有什么不同,"无论属于哪种，都要先找到其祖先元素中最近的 position 值不为 static 的元素，然后再判断：
如果都找不到，则为 initial containing block。
补充：
CSS面试题

ㅤ普通",
"制作一个访问量很高的大型网站，你会如何来管理所有CSS文件,js 与图片","涉及到人手、分工、同步
（1） 先期团队必须确定好全局样式，编码模式等
（2） 编写习惯必须一致
（3） 标注样式编写人，各模块都及时标注（标注关键样式调用的地方）
（4） 页面进行标注
（5） Css与html分文件夹并行存放，命名都要统一
（6） Js分文件夹存放，命名以该JS功能为准英文翻译
（7） 图片采用整合的.png格式文件使用，尽量整合在一起，方便将来的管理。
CSS面试题

ㅤ普通",
视差滚动效果,"视差滚动（Parallax Scrolling）通过在网页向下滚动的时候，控制背景的移动速度比前景的移动速度慢来创建出令
人惊叹的3D效果。
CSS面试题

ㅤ普通",
css div 垂直水平居中，并完成 div 高度永远是宽度的一半（宽度可以不指定）,"CSS面试题

ㅤ普通",
CSS实现自适应正方形、等宽高比矩形,"CSS面试题

ㅤ普通",
IE6 BUG的解决方法,"1.双边距BUG float引起的 使用display：inline；
2.像素问题 使用float引起的 使用dislpay:inline -3px 或者margin-right:-3px
3.超链接hover 点击后失效 使用正确的书写顺序 link visited hoveractive；
4.Ie z-index问题 给父级添加position:relative；
5.Png 透明 使用js代码改；
6.Min-height 最小高度 ！Important 解决’；
7.select 在ie6下遮盖 使用iframe嵌套；
8.为什么没有办法定义1px左右的宽度容器（IE6默认的行高造成的，使用over:hidden,zoom:0.08 line-height:1px）；
CSS面试题

ㅤ普通",
