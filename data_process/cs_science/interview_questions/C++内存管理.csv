问题,回答,所属分类
C++ 内存管理面试题阅读指南（必看）,"大家好，我是帅地。
为了方便大家复习，这些面试题的展示采取了右边面试题目，左边答案的方式，方便大家按需查看。
由于手机端不支持这种展示方式，当然，为了手机方便阅读，下面会贴出所有面试题答案链接，不过大家最好在 PC 电脑端阅读哈，相关面试题还会持续更新，尽量补充完善起来，建议收藏帅地的网站哦。
1. new/delete和malloc/free之间有什么关系？
1. new/delete和malloc/free之间有什么关系？
2. delete与delete 有什么区别？
2. delete与delete 有什么区别？
3. 内存块太小导致malloc和new返回空指针，该怎么处理？
3. 内存块太小导致malloc和new返回空指针，该怎么处理？
4. 内存泄漏的场景有哪些？
4. 内存泄漏的场景有哪些？
5. 内存的分配方式有几种？
5. 内存的分配方式有几种？
6. 堆和栈有什么区别？
6. 堆和栈有什么区别？
7. 静态内存分配和动态内存分配有什么区别？
7. 静态内存分配和动态内存分配有什么区别？
8. 如何构造一个类，使得只能在堆上或只能在栈上分配内存？
8. 如何构造一个类，使得只能在堆上或只能在栈上分配内存？
9. 浅拷贝和深拷贝有什么区别？
9. 浅拷贝和深拷贝有什么区别？
10. 字节对齐的原则是什么？
10. 字节对齐的原则是什么？
11. 结构体内存对齐问题
11. 结构体内存对齐问题
12. 在C++中，使用malloc申请的内存能否通过delete释放？使用new申请的内存能否用free？
12. 在C++中，使用malloc申请的内存能否通过delete释放？使用new申请的内存能否用free？
C++ 基础面试题阅读指南（必看）
C++ 基础面试题阅读指南（必看）
C++ 面向对象面试题阅读指南（必看）
C++ 面向对象面试题阅读指南（必看）
 C++ STL面试题阅读指南（必看）
 C++ STL面试题阅读指南（必看）
C++内存管理",
new/delete和malloc/free之间有什么关系？,"「注意」：delete和free被调用后，内存不会立即回收，指针也不会指向空，delete或free仅仅是告诉操作系统，这一块内存被释放了，可以用作其他用途。但是由于没有重新对这块内存进行写操作，所以内存中的变量数值并没有发生变化，出现野指针的情况。因此，释放完内存后，应该讲该指针指向NULL。
C++内存管理",
delete与delete []有什么区别？,"如果反过来使用，即对于单个对象使用delete []，对于对象数组使用delete，其行为是未定义的；
所以，最恰当的方式就是如果用了new，就用delete；如果用了new []，就用delete []。
C++内存管理",
内存块太小导致malloc和new返回空指针，该怎么处理？,"对于new来说，默认抛出异常，所以可以使用try...catch...代码块的方式：
还可以使用set_new_handler函数的方式：
在这种方式里，如果new不能满足内存分配请求，no_more_memory会被反复调用，所以new_handler函数必须完成以下事情：
C++内存管理",
内存泄漏的场景有哪些？,"内存泄漏的场景：
没有将基类的析构函数定义为虚函数。
判断和定位内存泄漏的方法：在Linux系统下，可以使用valgrind、mtrace等内存泄漏检测工具。
C++内存管理",
内存的分配方式有几种？,C++内存管理,
堆和栈有什么区别？,C++内存管理,
静态内存分配和动态内存分配有什么区别？,C++内存管理,
如何构造一个类，使得只能在堆上或只能在栈上分配内存？,C++内存管理,
浅拷贝和深拷贝有什么区别？,"浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享一块内存；而深拷贝会创造一个相同的对象，新对象与原对象不共享内存，修改新对象不会影响原对象。
C++内存管理",
字节对齐的原则是什么？,C++内存管理,
结构体内存对齐问题,"c++11以后引入两个关键字 alignas与 [alignof]。其中alignof可以计算出类型的对齐方式，alignas可以指定结构体的对齐方式。
但是alignas在某些情况下是不能使用的，具体见下面的例子:
alignas将内存对齐调整为4个字节。所以sizeof(Info2)的值变为了8。
若alignas小于自然对齐的最小单位，则被忽略。
确定结构体中每个元素大小可以通过下面这种方法:
这种处理方式是alignas处理不了的。
C++内存管理",
在C++中，使用malloc申请的内存能否通过delete释放？使用new申请的内存能否用free？,"不能。
malloc /free主要为了兼容C，new和delete 完全可以取代malloc /free的。malloc /free的操作对象都是必须明确大小的。
而且不能用在动态类上。new 和delete会自动进行类型检查和，也不需要自己明确内存大小，malloc/free不能执行构造函数与析构函数，所以动态对象它是不行的。
当然从理论上说使用malloc申请的内存是可以通过delete释放的。不过一般不这样写的。而且也不能保证每个C++的运行时都能正常。
C++内存管理",
