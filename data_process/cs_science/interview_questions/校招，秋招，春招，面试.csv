问题,回答,所属分类
二本，从 0 到 1，终拿到腾讯 offer 了,"这是帅地让一位读者写的一份学习经历，这位读者，算是和帅地关系还不错的读者吧，他大一的时候就加了我微信了，当时还是经常骚扰我的，问这问那，甚至让我直接给他的算法题找 bug。。。。。但是，我看他挺真诚，并且每次都给我的朋友圈点赞，我也就每次都耐心回复他了（实不相瞒，经常朋友圈点赞还是有点用，，）

注意，当时帅地还在上学，并没有那么忙，不过现在帅地太忙了，这种问题基本不回复哈。

不夸张的说，我觉得，我还是给了他挺大的影响的，我一直跟他说，不需要按照学校的来，因为有些学校的学习气氛确实不好，编程这玩意，自学就够了，当时他也一直把我当作榜样，我入职了腾讯，也给了他信心，可能是因为，如果我拿不到大厂 offer，他就会觉得大厂 offer 贼难吧，但是我想说的是，大厂 offer，并没有想象中的难，前提是你从大一/大二就开始规划，把该学的都学了，那么真的不是很难。
这位读者，刚开始，我让他专心学算法，后面提前去学习计算机基础，深入学习一门语言，去做项目，功夫不负有心人，在今年的春招中，第一次投递腾讯，就拿到了 offer了。这位读者也是普通二本院校，所以我想把他的经历分享出来，给公众号的读者打打气，以下是他写的文章 + 帅地排版和修改。
Hello，首先自我介绍一下，我是一所普普通通的二本院校的大三学生，坐标江苏。
今年三月份拿到了腾讯实习的offer，人生中第一次面试是腾讯，部门是 TEG 的云架构，并且顺利签约，说实话内心还是挺高兴的，在这里和大家分享一下自己的经历。
下手要果断。不要怕自己不够好不够强，我大概是二月底开始投简历。我一开始使用了牛客网投简历的方式，很遗憾，记得牛客网公众号当时给我的等待面试安排直到现在我都没有收到安排，效率过慢，很容易失去机会。不过我的简历是很简单地使用牛客网的模板写的。
有了想法就果断去投，要去官网投！
帅地注：平时帅地让大家去牛客网，更多的是大家去那里找内推，查看公司招聘时间，笔试时间，最后还是要进去官网投递的，而不是在牛客网投递。
对于大概的需要学习的知识有：
我是遵循着越精简越好的做法写的。本来写了两三页，最后删删改改保留到了最后一页内容，无用的可以删掉，比如学生会经历啥的，基本没用，不过很多公司制定的简历都是要必填的话，可以都写上去。
如果是内推直接发简历的话建议写的少一些，把重点和亮点写上去，让 hr 一眼就直接看见，包含了一定需要的信息，比如姓名学校什么的，自己比较擅长的知识，比如说 redis，爬虫，linux，或者对 jvm 理解比较深，也可以强调一下，面试官会针对着你的简历去问。
项目的话不要太大众化，也千万不要造假，最好是自己真的比较熟悉的，面试官会问有没有 github 链接，这个时候如果没有还是比较尴尬的，可以分条写下重点内容、利用的知识点，最后可以总结不足之处，遇到困难如何解决，后期会如何去改进。项目不用很多，我写的是2个，不过越多一般会比较好，前提是比较有价值的。
腾讯基本上是必问，特别是 TEG这 些部门，我的三轮技术面每一轮都是从计算机网络开始问的，而且问了还挺久的，一定要重视 TCP 协议，三面面试官让我讲TCP 里面的各种机制，然后我因为时间间隔久，说的就比较乱，这里建议可以自己整理一个大纲，然后好好填充，最后复习，不要抄网上的，一个是各种版本太多，还有的是不一定完全正确。
我是从大一开始就看计算机网络自顶向下方法这本书，大概断断续续读了有两三遍，这本书在本科应付面试还是够了。我也只读了这一本书，我觉得自定向下的方式还是挺好的，和 csapp 不太一样，计网还是举了很多比较通俗的小例子，比如邮递员啊，一家人和邻居的互动这些，看着还是挺有趣的，前六章一定要读懂，记住关键知识点。
在校招的层次上，这本书已经是很详细了。举个例子，面试有一个高频题目，就是 web 页面请求的过程，可能大家看过面经的都会粗略的说什么 DNS 查询啊，三次握手，浏览器解析，但是这个问题其实在书上的 326~331 页上有十分详细的过程，同时也囊过了前六章的非常多的知识点，书中是用Bob用他的便携机在学校查询了 www.google.com 主页来举例。你说的越详细，面试官对你越评分会越高。
操作系统是我比较薄弱的地方，我看 csapp 都挺吃力的，经常看的犯困，当时学校教的其实也比较水，就是直接教你怎么算，然后出英文试卷，相当于背题应试。那怎么够呢，我因为看书吃力，于是选择了看 b 站清华大学的操作系统课，老师是向勇和陈渝，对于我这种比较笨的人还是挺友好的，然后对应着 csapp 来看，会好一些。
还有就是 linux，似乎很多面试官会问你平时是不是使用 Linux 编程，我直接就怂，虽然平时项目上线会用 linux，不过我大概只知道一些指令，比如 ps, netstat 这些，然后去 proc 查查 cpu 状态，这个三面面试官也问了，你平时如何查看 cpu 状态，如何查看内存占用情况，如何定位程序出错的地方（大概是）。
然后我就开始扯什么 top 啊，什么利用率负载率啊。最后还算是扯过去了，二面面试官也针对 Linux 问了挺多的，遇到不会的就诚实的说不会，不要强行去解释，也不要逞能，这样会被怼的很惨。三面的时候面试官还问我磁盘问题，RAID1-5，我觉得这个对我来说还是挺深的…
这里扯下 java 的，二面面试官针对java问的比较多，一和三基本没问。
其实我二面是答得最不好的一轮，很多概念模糊了，也犹豫了挺久的，比如他问我抽象类和接口的区别，我大概还是一年前看的了，当时我努力搜寻记忆中的概念…，憋了好一会才憋出来几个区别，不过事后看看真的很简单，基本上是看了一遍就回忆出来了，大概还有类继承的一些问题，jvm 让我每一块分开来说，面向对象，我每个说的都不太详细，还是挺遗憾的，因为我真的对java太有信心了，一直没去复习看它，结果眼高手低了。
所以千万不要放弃每一个知识点，然后聊了一下 go 语言，我之前有去看过云风 c 语言写的协程，大概了解了一些。java 我看的书是 JAVA核心卷，Thinking in Java，effective Java，其实我觉得这三本书是挺够的了，特别是 Thinking in Java，初看是略看，然后多看几次，就能注意到很多细节，而细节往往可以决定成败。
其实说是三本书，还有很多是不必看的，比如 Swing 编程这些。核心卷对于入门来说非常友好，因为很简单。Effective Java 放在最后看，往往是优化代码，让代码更加安全、性能高、优雅。
多线程
我用的是 java 并发编程的艺术这本书，多线程一定要好好学，项目中一定是常用到的，然后推荐大家看一看并发编程网，里面的内容基本是很优秀的。很多是国外搬运翻译的。
算法靠刷，刷多了有题感，不过腾讯是挺爱问排序算法的，那基本的稳定和不稳定排序算法是要熟悉的，比如我二面问了希尔排序，我本来以为大概率是问快速排序的，然后希尔时间复杂度我还说错了，，，，
好在其他我都记得比较熟悉，堆排序，快速排序（随机选基数，三路快排）等，归并排序（我觉得这个很重要，因为 java 的 sort 就是用的快速排序+归并排序），而且归并排序是稳定排序。基于归并排序的算法题延申的都挺多的，有看到其他大厂的笔试算法题就是归并。
算法的话，如果时间充足，比如我是大一寒假开始写算法，我是每一题自己钻，然后看题解，往往一天只写两三题。目前为止刷题总数 leetcode + 牛客，加上一些 OJ 平台，大概是 600+ 的题量，可惜腾讯的面试里问的算法不怎么多…，这里总结一下必要的算法知识，首先是数据结构每一个都需要很熟悉，比如链表，哈希表，树，图，栈，队列，堆。
（1）链表，什么反转链表，环形链表，链表排序等等算法，比如 LRU，就是用一个双向链表 + HashMap 来实现。别看链表基础，但是很多大厂是挺喜欢链表的，比如字节跳动，再比如跳跃表，是 redis 里的 zset 的底层实现。
（2）哈希表，最好要理解底层实现，建议看源码，一定要清楚如何实现。用处也是非常非常多。比如记忆化递归在有时候数组不适用的情况就是用 map，还有HashSet，TreeSet，这些的源码都建议去看。哈希表的用处还非常广泛，这个基本是最常用的数据结构。
（3）树，树有很多，二叉搜索树，AVL 树，红黑树（旋转不如AVL频繁），字典树（敏感词过滤）等，leetcode 树专题，不要犹豫，直接刷，腾讯这次笔试也有树的题目。而且很容易变种，树基本是以递归，不过也会有题目要求使用非递归，这个时候就要用栈和队列来辅助，比如迭代方式前序遍历。关于树的算法题太多了，有一阵子 leetcode 周赛，每次第三题都是树。
（4）图，图的考察点不如以上频繁，大概是有向图，无向图，BFS 和 DFS，还有拓扑排序，Dijkstra 最短路径，Krusal 最小生成树等等。
（5）栈，用法也是多，感觉很多情况是和字符串挂钩，更难一些的是单调栈，某年京东除了一题很难的题目，就是用单调栈。
（6）队列，用法也是很多，比如拓扑排序，求二进制，BFS 等等。
（7）堆，很多时候有妙用，比如拓扑排序，Top K 问题。
以上数据结构一定要很熟悉，应用实在是太广泛了。我大一的时候，用c语言写动态扩容栈、队列，红黑树，斐波那契堆，二叉堆，有向图（包含各种算法），AVL树等挺难的数据结构，如果时间充足可以这么写着玩，锻炼coding能力。
重要的算法有：二分，递归，记忆化递归，回溯，广度优先，动态规划，数学（有蛮多脑筋急转弯题目的），滑动窗口（双指针），排序算法，程序设计（比如设计LRU，LFU）。
如果写后台那大概率是和数据库打交道的，这里推荐大家学习 Mysql，redis，mongoDB。MySQL 可以学习的太多了，首先要写得一手好 sql 语句，这里要注意利用到索引，减少表连接，提高 sql 效率等等，leetcode 上直接就用 sql 练习，刷个几十道足够。
然后深入一点，学习引擎，索引（聚簇索引，二级索引，B+树，Hash索引，最左匹配等），ACID特性等等，索引是重点，三面的时候详细问了B+树，然后就扯到了索引。这里建议重视一下索引，一是它是真的非常有意思，二是它真的很重点…
关于 NoSql，看的出来三面面试官是挺挖掘深度的，对于项目，数据库，操作系统，计网，问的都是挺细节挺深的，他问我聊不了解 MongoDB，我说用过但不是很了解，是以前写爬虫的时候配合用的，可以有什么什么用，扯了一堆。然后 redis 也问了，比如主从辅助，哨兵，选举机制，分区集群，等等。还好我redis学的还可以，都答上来了。
redis是绝对值得认真学习的。
我投了提前批，所以直接参加面试。3.5 给了通知，我刚好到南京见到了女朋友，结果傍晚通知就来了，于是晚上一起在南京吃了一顿索然无味的饭，明明菜做的非常好…
帅地注：如果可以，一定要参加提前批。
3.8 在常州初面，面试官很随和，带着耳机，我自我介绍到一半然后网断了，于是接下来的自我介绍他都没听见，笑着叫我重说，我突然也就不紧张了。上来直接问计算机网络，也没紧张，流畅的答完了，记得的问题就是TCP和UDP，三次握手，为啥不能二次握手，浏览器输入URL，还有的也记不得了，问的挺多的计算机网络，然后似乎对其他没什么兴趣就直接问了项目。
问了 nginx，分布式锁实现，分布式限流实现，令牌桶算法和漏桶算法，除了这些算法你还有什么思路，这些算法的优缺点比较，redis做什么用，优点？异步阻塞队列？和kafka比较？聊天系统，为什么两个项目使用的MQ不一样，MQ对比，心跳机制和选举机制。
大概是这些，总的来说答得还可以，也蛮流畅的，最后问面试官优缺点，他说优点是比较帅，我于是开始觉得我说的并不怎么样…然后第二天早上就接到了二面通知。
3.10 晚上 8 点，我一边喝红牛一边等电话，二面面试官声音比较成熟一些，态度也比较正式，不过人超好，认真的介绍了自己，我一开始都没听清TEG部门…，
然后二面其实说的不怎么好，一开始一样是怼了计网，有一个问题一面面试官问过了，于是我告诉他上一个面试官问过了，然后他就跳过了，印象深的是状态码，从1-5我都说了一些，其中我还说错了，我说我项目中经常看见的Method not allowed，我说成了403，结果是400…很尴尬。
然后怼了java基础，jvm, 排序算法，我说的真的不是很好，因为过于自信…，这一面反而项目问的不怎么多。然后了解了我的性格，学习态度，有点像 HR 面，我中间紧张的时候还安慰了我，说没事喝口水。
然后有的记不得了也耐心等待我，然后聊了聊第一个项目中微信支付怎么做的，其实没什么技术含量…还有一些项目点大概忘了，聊了一下 go 语言。然后我做了一件愚蠢的事情，我问面试官我还有下一面吗，面试官告诉我不管在哪个公司问这个都是不好的，我心里凉凉的…
大家切记…最后说我总体来说挺不错的，可能有些基础忘了，但是其他方面还是不错的。结束了以后我还是挺沮丧的，觉得自己肯定挂了。
然后 3.11 下午躺在宿舍床上接到了深圳总部的电话，是一个声音挺年轻的男声，后来才知道是部门主管…，
约了一下三面技术面时间，我选择了14号周日，然后安排了一下上午的时间，于是愉快（煎熬）地等待。
在学校咖啡馆面试，感觉压迫感还是蛮重得，首先考察计网，很多问题还是在面经上没有的，结合了实际场景，感觉也是在挖掘深度，怼了我的项目，问的很详细，从分布式限流，然后solr，redis分区集群，Linux，定位项目问题，查看cpu状态等，主从复制，哨兵等等，B+树，数据库。
然后说我们部门也负责的数据库，然后我哇，好厉害（确实很厉害），然后操作系统，磁盘，我坦白操作系统是我比较薄弱的地方就不往下问了，还问了存储计算分离，锁，定位功能和附近景区附近的人实现，总的来说还是感觉在挖掘深度。
然后问我兴趣爱好，我说弹钢琴和看动漫，进击的巨人你看过吗，他说你咋不说鬼灭之刃呢，恰好我寒假补完了鬼灭…，感觉人还是很亲和友好的，聊的很开心，最后我问是哪个部门呀，他说是TEG，说实话我心里是非常开心的，因为我是真的喜欢TEG。
最后 3.16HR面试，不得不说腾讯效率高，基本是隔一天就会进入下一轮。HR面也聊了挺久的，从各方面来问，然后让我讲第一个项目从头到尾的过程，我就说了很多很多，从技术方面和团队方面，解决问题，代码规范，然后讲了一下自己的经历，了解了一下家庭情况等等。
最后过了几天打电话给了口头offer，聊了一下薪资，确定了地点是实习时间，当然是开心的不行了。第二天电子offer就发来了，于是愉快的签约。
三个面试官真的都超好，人非常亲和，腾讯效率是真的很棒，总的来说面试体验非常非常好。
帅地注：不得不说，腾讯的面试官真的好评。
首先要感谢一些人，一直支持我的家人，给我提供好的条件，关心我的身体。
然后是女朋友，面试是一路陪我过来的，每一轮面试都默默陪着我，在心情不好的时候安慰我，鼓励我，会一直走下去。
接着是地哥（公众号帅地玩编程），从我大一就一直给我帮助，我有的时候发了一题算法题，过了一会就把详解给我，打的字都超多，平时很忙也没敷衍我，不厌其烦地帮我解答，公众号内容也很赞，干货满满，非常感谢。
然后是我的舍友们，大一是一位舍友，也是兄弟，教了我第一个 C 语言程序，看着小黑框，莫名的成就感油然而生。也是他给了我很多路线上的帮助，我记得大一我学不会指针，他骂了我一顿，然后教我，我还真被给骂会了，我的学习态度也是被他感染的吧，解决一个问题一晚上不睡，吃饭也在思考遇到的问题。
现在虽然人在英国，不过也保持着联系，交流学习，互相帮忙。还有一个搞前端的舍友，我们学校第一前端，和我一起经历了很多时光，一起工作一起玩乐，陪我度过艰难的时刻，感情深厚。
写这篇文章是想告诉一些新人朋友们，不管学校是好是坏，只要自己相信自己，永远不服输，永远认为自己可以，那么你一定可以，学校其实真的不是很重要，重要的是你这个人如何。我以前也很迷茫，觉得一个二本学校怎么可能去大厂，但是事实上不要考虑那么多，人生也是如此，只管不断前进就好了。
无论是春招还是秋招，也无论拿到什么样的 offer，这绝对不是终点，而是人生另外一个重要的起点，为了让我们以后有更多的选择，我们都得持续学习，只有持续学习，我们才能变的更强，当然，所谓学习 ，绝对不局限于编程知识哦。
最后，欢迎大家加入帅地的知识星球，其实大部分情况下，大家都很努力，如果有个过来人指点一下，推一把，或许你可以走的更快

如果你没有自己明确的学习路线，完全可以跟着帅地星球的 PDF 学，完整的学习攻略 + 资料都提供了，而且都是优质资料

关于电子书，具体可以看这篇文章：第一本原创 PDF，帅地肝完了
第一本原创 PDF，帅地肝完了
每当春秋招来临，一份好的简历可以让你拥有更大的面试机会，帅地也可以帮你修改优化简历。

帅地会在星球知无不言，无论是 学习规划，offer 选择，简历修改，还是学习路线，帅地都会在 48 小时以内答复你的问题，并且根据你自身的情况，为你量身定制学习路线。
星球已经有 1300+ 位帅友，这里还有一些 20 元的优惠券，如果你信的过帅地，那么欢迎你的加入，或许可以让你少走很多弯路，即使后悔了，也能 72 小时无条件退款。

知识星球详情：知识星球
知识星球
读者的 offer 之路",
关于春秋招的一切,"对于日后需要找工作的同学来说，春招/秋招可以说是学生生涯中非常重要的一战，但是我发现很多人却对春秋招的了解甚少，有些人甚至以为是毕业之后再开始找工作，进而导致了找工作的最佳时间段。
说实话，要嘛错过春秋招，要嘛临时抱佛脚准备春秋招的人，我可以说是经常遇到，加上我公众号的读者里，学生较多，所以我觉得有必要写一篇关于春秋招的文章，供大家一个参考。
如果你对春秋招不怎么了解，或者不知道怎么准备春秋招，又或者想看看我是如何准备春秋招的，那么还是建议大家好好看一看这篇文章，我这篇文章会写的比较详细，大家也可以根据目录来看。
春招开始的大致时间：每年的 3 月 ～ 5 月。
#####（1）春招是找实习的最佳时机
对于计算机专业的学生来说，如果学校允许，大部分人都会在大三/研二的暑假去各大公司实习，但是大家必须记住的是，这个实习 offer 并不是在暑假期间找的，而是在春招期间找到。
也就说，春招最重要的目的，就是找实习，基本各大公司都会在春招期间发出大量的实习 offer，你在 3 ～ 5 月份拿到实习 offer 之后，可以等到暑假再去公司实习。当然，你拿到 实习 offer 之后，也可以马上申请去公司实习，这主要取决于你（当然，公司不给提前去的话，那就没办法了）。
对于毕业后要直接工作的同学来说，我建议你一定一定要参加春招！
如果你能在春招拿到不错的实习 offer，这不仅让你有了实习经历，甚至还有很大的概率直接在公司转正，就算在春招没拿到 offer，那么也不亏，通过春招的多轮面试，可以让你积累的很多面试经验。
实不相瞒，我在春招就很惨了，面了几家公司，都由于各种各样的原因被刷了，这让我积累的很多面试经验。我觉得自己能够在秋招的提前批就拿到 offer，春招的面试经历是立了很大功劳的。
今年的春招刚过不久，对于现在大二/研一的同学来说，如果要参加明年的春招，我觉得最好提前准备吧。
对于秋招没有找到工作，或者没有找到满意工作或者考验失败要去找工作的同学来说，那么春招，将是你最后一次以校招的身份去找工作了。
不过这个时候，公司只有少量的 offer 了，大量的 offer 都已经在秋招发出去了。当然，竞争的人也少了很多，很多大佬已经在秋招拿了满意的 offer ，不会来跟你竞争了，你的对手估计就是那些考研失败/没有找到工作/没有找到满意工作的学生，所以在最后的这次春招中，找到工作的机会还是非常大了。
所以，对于大四/研三的同学来说，如果在秋招没有找到工作，一定要抓住 3 ～ 5 月份的春招。
秋招开始的大致时间：每年的 8 月 ～ 10 月。
是的，春招最主要的目的是找实习，并且面向大三/研二；而秋招最重要的目的就是，找正式工作的 offer，面向准大四/研二的你。
对于毕业后要找工作的同学，你可千万不能错过，各大公司将会在秋招派出大量的 offer，你也会在秋招期间被笔试虐，被面试官虐，还没面试就被刷简历……总之，秋招，真的很累，每天不停笔试面试，不停被刷……当然，大佬除外。
不过这里有个问题需要说下，秋招 8 月份就开启了，然而我还在公司实习怎么办？
还能怎么办，当然是一边实习一遍偷偷面试笔试，我那会七月底开始投递简历，八月一边实习一边疯狂参加笔试面试，大家都是这样的，不过大部分公司的笔试，往往都是在晚上，我觉得完全有时间参加；面试的话，有些你也可以和面试官商量面试的时间。
当然，如果你刚好在理想的公司实习，并且感觉自己转正的概率挺大，那么我觉得你还是要好好准备一下转正相关的工作，例如答辩啥的。如果成功转正的话，就舒服很多了，不需要跳入秋招这个火海。
春招和秋招的流程其实差不多，大概都是：
（1）投递简历：一般去各大招聘网站投递/官网投递，后面说。
（2）笔试：大部分公司都会有笔试环节，对于很多互联网大厂来说，这个笔试成绩将直接影响你能否进入面试环节，所以说，笔试成绩非常非常重要，并且笔试中最重要的部分就是编程题，编程题绝大部份都是算法题，例如像字节、拼多多、腾讯这些大公司，笔试可能全部都是算法题，一般 3 ～ 5道，时间 120 分钟。
（3）面试：能够进入面试环节，其实也挺不容易，笔试成绩好，面试机会真的会多很多，笔试做的差，你的面试机会真的会少很多，面试一般是 2～3 轮技术面 + 1 轮 HR 面。并且大部分公司都支持远程面试，持续时间 1 周 ～ 1 个月，如果是现场面试的话，就很快，可能一次性面完技术面。
（4）意向书、录用通知书、签三方啥的，能到这个环节的话，那么恭喜你了，99% 稳了。
对于内推，在当时我也百度过什么是内推，也看过很多回答，然而对内推的含义以及流程啥的，依旧不是很懂。所以我今天就以回答问题的形式谈一谈对内推的理解。
什么是内推
显然，内推就是内部员工的推荐。指在求职中，不通过常规的简历投递渠道（包括但不限于网申、双选会、宣讲会现场投递）等方式，而是通过已经在某企业就职的内部员工，将各方面条件优秀的求职者的简历直接投递到HR或部门负责人手中的一种招聘手段。
内推和自己去官网投递有什么区别吗？
对于校招生来说，我认为区别不大。在我看来，内推只是另外一种简历的投递渠道而已，并不存在免笔试/走绿色通道的优势，当然，我指的是在大部分情况下是这样，有个别走绿色通道也是有可能。
到时候你可以去牛客网或者各大招聘公众号看，内推可以说是满天飞，基本没啥门槛，扫码/点击链接即可参加内推，我说这些数据只是想跟你说，通过内推的渠道去投递简历与通过其他渠道去投递简历，区别不大，千万不要觉得有了内推，感觉自己多了很多优势。
内推依然需要经简历筛选，有些依然需要笔试，是的，依然需要笔试。我秋招投递的简历，80% 都是通过内推链接填写的，但好些依然需要笔试，这个还得看公司，不过通过内推形式的话，你可以找内推人查询自己的简历状态，可能这也是内推的一种好处吧。
所以，总的来说就是，内推就是简历的另外一种投递方式，并不存在多大的优势，但也没啥坏处（除了把你的简历暴露给内推人知道了），所以如果有内推，还是可以参加。
基本大部分公司都会有提前批，我还是非常建议大家参加提前批，如果你提前批失败了，那么依然不影响你参加正式批，并且各大公司会在提前批发出大量的 offer，我秋招时就是在提前批拿了 offer 之后，就早早结束秋招了。
例如正式批 9 月份开始的话，可能提前批 8 月份就开始了，建议大家不要错过。
有人可能会问，提前批失败了会影响正式批吗？
我认为影响不大，虽然你失败了，有些公司的系统会记录的面试情况，但我认为影响不大。我参加春秋招那会，有人面试阿里，在秋招失败了好几次，最后还是进了，腾讯也是有好多次面试机会，前面面的很差，后面还是进了。也就是说，提前批失败了，比起你多了一次面试机会，那么我会选择多一次面试机会。
不过我必须说明的是，提前批会比正式批难
是的，提前批高手如云，很多大佬都会参加提前批，并且各大公司在提前批的要求可能也会高一些，毕竟名额有限，大家都想招优秀一点的人，那么提前批肯定会提高要求，反正提前批 offer 有剩的话，我可以在正式批发出，所以提前批会比较难，但这不能阻碍我们去参加提前批，
对于投递渠道，其实我这还真的没啥渠道，我就只有两个渠道：牛客网 + 公众号。
这里我必须强调一个点，很多人跟我说，大公司都没来我们学校宣传，我连投递大公司的机会都没有。每次看到这样的人，我就知道这人对校招一点也不了解。
大公司的战场，不在校园宣传，而是在网上，基本各大公司，你都可以在网上进行简历投递。实不相瞒，学校的校园招聘，我一场都没参加过，我简历基本都是通过牛客网 + 公众号 + 官网投递的。
我觉得，牛客网 + 公众号，可以满足大部分人了，例如在牛客网上，在求职讨论区那里，会有非常多的内推，建议的多关注。并且里面也汇聚了各大公司的招聘时间等，而且也有很多大佬在那里分享面经。
而公众号的话，如果你对哪个公司感兴趣，完全可以去关注这个公司的公众号，例如你对腾讯感兴趣，可以关注腾讯招聘，例如你对字节感兴趣，可以关注字节招聘，这些公众号，会第一时间告知你校招的开启时间以及简历投递方式。
所以，对于投递渠道，我推荐牛客网（https://www.nowcoder.com/） + 微信公众号，至于一些其他的招聘 app，大家可以去百度搜索下。
实不相瞒，春招我特么没准备过，所以我春招被刷了几家之后，我就意识到自己的问题的，于是从 6 月份我就开始准备了，我准备的是 Java后端开发的岗位，如果你也是面试开发岗，那么我的这些你可以做一个参考，我会屏蔽语言特性。
我认为在校招中，最重要的就是算法 + 基础知识 + 项目了。并且这三个模块，完全可以同时进行准备。
我刚才说过，对于很多大公司，笔试将直接影响你是否获得面试的机会，而笔试的大部分题目都是算法题，所以算法就显的非常重要了。
不得不说，算法可以说是很多人的软肋，并且算法不容易短时间提升，所以我建议你，一定要长期保持刷题，如果你是要准备即将到来的秋招，我建议你现在就可以刷了，那么刷哪些题呢？
我建议你先刷《剑指 offer》这本书的题，不过我并没有买这本书，而是在牛客网把剑指 offer 的 66 道编程题都刷了一遍，总的来说，这些题并不难，不过里面包括了很多种常考题型，掌握这 66 道题，一定可以在面试中给你很大的帮助。
刷完剑指 offer，如果你想挑战难一点的，那么我给你推荐另外一本书《程序员代码面试指南:IT名企算法与数据结构题目最优解》，这本书有点难度，不过总结了非常多的题型，适合应付笔试。因为笔试中的题，比面试中的题，难多了。
不过如果你觉得自己刷这本书太吃力了，那么也可以去 leetcode 刷那些 top100 之类的题，反正我是不建议从第 1 题刷到第 n 题这种模式，当然，我这里不是教你怎么学算法，而是如果你不知道怎么准备校招的话，或许可以按照我说的这个来。
总的来说就是：先刷剑指 offer，不过剑指 offer 应付面试还好，应付笔试我觉得不行，而《程序员代码面试指南:IT名企算法与数据结构题目最优解》这本书，我觉得应付笔试挺不错，不过挺难。然后如果你 leetcode 那些热门题没刷过的话，我其实也建议你去看一看，一步一步来。
我自己的话，其实就刷了 剑指 offer，然后刷了牛客网那些 sql 的题，之后刷了部分《程序员代码面试指南:IT名企算法与数据结构题目最优解》的题，这两本书在这里就能找到电子版下载：计算机书籍免费下载（高清带目录完整PDF版）
计算机书籍免费下载（高清带目录完整PDF版）
基础知识我自己其实强调过很多次了，也没什么好说的，我觉得除了深入准备一门语言外，剩下的就是准备基础知识了，我公众号也发过好多，主要就是这几门：计算机网络 + Mysql + 操作系统 + Linux常用命令。如果你没时间准备了，那么我推荐在这个 github 来学习：https://github.com/CyC2018/CS-Notes
我觉得操作系统在这里学习就可以了，感觉操作系统、Linux这些问的不深，对于计算机网络，如果可以，我还是建议你可以刷下《图解HTTP》这本书，很快就能看完了，电子版在里 就能找到：计算机书籍免费下载（高清带目录完整PDF版）
计算机书籍免费下载（高清带目录完整PDF版）
当然，一定要做笔记，因为太多了，做笔记方便复习，我做的是很简洁的笔记的，我把自己整理的思维导图送给大家吧。
九大思维导图助你拿到心仪的 offer

打开计算机网络的思维导图长这样

由于链接容易失效，不方便更新，大家可以在我的微信公众号帅地玩编程回复思维导图，即可获取九大思维导图，相信一定可以在面试时助你一臂之力。
我觉得我整理的这些，你可以看看，根据我的来查漏补缺，基本大部分都整理了，虽然不怎么详细，不过应该可以看的懂。
对于项目的话，其实我自己是突击的，我项目做的太少了，所以这里也给不了太多的建议。不过，项目我觉得不在于多高大上，而是在于你学到了什么，你在这个项目中的思考以及使用到的技术。
如果你没有项目的话，要嘛自己去找资源，要嘛花点钱去买，其实我更加建议大家话花点钱去买，例如去慕课网、网易云这些课堂买，其实也就是几百块钱，买的课程，资料比较全，可以节省你好多时间，相当于花钱买时间，并且可以看项目的评价、用到的技术栈之类的，所以呢，我这里建议没有项目的小伙伴，或许可以考虑下勒。
这篇文章基本详细介绍了春招以及秋招，并且也给大家介绍了需要准备的核心知识，在知识准备上虽然没有说的很细，但也大部分讲到了，因为篇幅有限，我不可能一一展开。当然，我说的这些不可能适合每一个人，更多的是，给你一个参考。
最后帅地也祝即将参考秋招的同学能够拿到满意的 offer，还处于大一大二的同学，则赶紧找到自己的发力点，加油！
校招之路",
春招面了两次腾讯都挂了,"如果你提前批和正常网申都投的话，可能会获得两次笔试/面试的机会，我投了两次腾讯，不过，两次都在二面挂了，特别是第二次二面，我真的决定自己太他妈傻了。作为一个新人，谈谈我面试过程中犯过的一些错吧，或许对你也有点收获。
腾讯提前批的面试应该是一个月前就开始的，我第一个投的公司就是腾讯了，人生的第一次笔试和面试也献给了腾讯。先说下笔试吧，笔试是 5 道编程题，个人觉得，腾讯的笔试题比较简单吧，也就是说，获得腾讯的面试机会应该算是不难的吧，5 道我好像是做出了 3道 + 一道90%测试用例通过 + 一道也是百分之几十来着的，忘了。
最后的结论就是，个人感觉腾讯笔试不怎么难，投了之后获得面试的机会应该非常大，我的简历背景是没有任何亮点的，没有啥比赛，没拿过啥奖，非211/985，普通一本。这里建议秋招有兴趣的一定要投一下，万一面试也过了呢，腾讯技术研发实习一般是 2轮技术 + 一轮HR面，万一2轮技术面过了拿offer机会还是挺大，有时候就会多加一轮技术面。
当然，我听说前端的 HR 面是综合面，听说比前面的两轮还难还难过。
一面是视频面，人生第一次面试，可以说我是很紧张的，一面我完全就是个小白啥套路也不懂，面试官问啥我答啥，完全不会引导，面试完后我感觉自己是真的傻，主要是问了一下问题：
1、浏览器输入一个地址回车之后都发生了啥？
这个可以说是非常高频的面试题了，我觉得自己这方面还可以，压抑自己的紧张，好好详细秀一波，然而，由于我事先并没有去准备过这个问题，而这个问题又涉及到很多步骤，所以我在逻辑上讲非非常非常不好，卡住了好几下，最后不管三七二十一，就说关键词了：有DNS转换啊，ip网络寻址啊，三次挥手啊，可能还有NAT地址转换啊，还有ARP啊。
可能平时看我文章的人会发现，我是喜欢把这些技术一点点推出来，有逻辑着连起来的，这样说出来会特别舒服，不过我这次面试的时候，连不起来的，归根到底就是，没有准备，头脑觉得自己都懂，但是不意味着讲的出来，所以我在这里是建议各位，对于那些高频的面试题，自己最后尝试着口头去表述一下，或者文字书写一下，要是你来回答，你会怎么说？
2、TCP 和 UTP 有什么区别？
我在回答这道题的时候，也是非常简单着回答他们的区别，例如一个面向连接一个非面向连接，一个可靠一个非可靠，非常简单就答完的。
不过这道题是一个高频题目，按上面的那个回答，就算回答出来，我觉得也是一点优势都没有。因为这些简单的区别，99%的人都懂，我觉得我们应该再往深入回答，例如TCP有流量控制，拥塞控制，面向流以及基于这些区别，他们的使用场景等等。
不过我并没有回答，不是我不知道，而是我想假装不说，等着他来问，因为我听说面试官都会一直往深问到你不会为止，然而现实是他并没有问，换话题了。感觉自己错过了一些表现的机会。
这里我想说的就是：如果你知道，你可以多说一点，千万别像我这么傻，等着别人来问。
3、写个快速排序
和算法有关的，我觉得自己还好，写的虽然不是特别快，但感觉自己写的还好，无论是从代码的排版（因为这个一般都是在笔记本写的，不可能给你IDE），以及代码的简便程度，我觉得都不错，这里我想说的就是，自己平时写代码的时候，一定要注意排版，别老是依靠IDE给你一键排版。
虽然我已经写出来了，不过他之后让我说下快速排序的步骤，我老实说了，不过我觉得，这些题都太简单，如果面试官的很基础，你也答的很基础，我觉得没啥优势，对于快速排序，我本来想补充的，例如对中轴的选择问题，与其他排序算法的一些比较，应用场景等，不过，我是想着等他来问我……
按照我这样写文章的话，估计得上万字，我下面简便说下就行了。如果你们感兴趣我这么啰嗦的话，下次我再来吐槽说说我回答的不够好的地方。
4、一条SQL执行的很慢的原因？（之前写过文章，建议看看）
5、MySQL有哪些存储引擎以及他们之间的区别（我其他引擎忘了名字叫啥）
6、如何查看SQL语句的执行状态，知道这条命令吗？（我当时MySQL其实几乎没学，很多都不知道）
7、qq用的是tcp还是udp（两种都有涉及）
8、说说jvm内存模型（其实并没有JVM内存模型，只有Java内存模型以及JVM内存结构，你要问清楚是哪个再答）
9、JVM内存结构中有栈堆等，为啥要用栈这种数据结构？（主要是操作简便，快速）
10、说说垃圾回收？（老年代，新生代，永生代的区别等，各自使用的回收算法，新生代又分eden和survivor区等）
11、说说aop和ioc
12、大致看过哪些书？有逛技术论坛的习惯吗？说几个你常见的技术博客平台？有去逛过国外的技术博客吗？看的懂文档吗？
总体上一面比较简单，面试官没有深入问，不过问的很广，这里问一些，那里问一下。感觉自己答的还好，也顺利过了。第一次面试收获还是挺大。
1、对于懂的一定要多说，可以延伸，只要面试官不打断你的回答。
2、对于高频面试题，一定要自己模拟说一下，而且这些题一般不难，一定要多延伸，不然没啥优势。
3、感觉以后面试不那么紧张了，也就这么回事。
几天后收到复试通知，二面是电话面，二面操作系统和Linux问的有点多，我二面感觉自己就挂在Linux上，我Linux不大懂，被问了好几个个基础的问题都不懂，自己也是醉了，感觉自己应该和面试官说一下我Linux还没学?。操作系统很多细节也忘了，说说二面的面试题吧。
1、说下四次挥手，什么时候会出现time_wait状态？（我扯了一下，面试结束后，发现自己弄错了，真想给自己一巴掌，主要是，其实我对三次握手和四次挥手没去准备过，虽然看过挺多文章，但是具体的没记住，凉凉）
2、红黑树知道吗？说说，为啥有了平衡树还需要红黑树？（平衡树太严格，插入很容易打破平衡，经常需要调整，而红黑树是一种折中方案……）
3、红黑树是如何保证查找效率不会太低下的？（我后面再写一篇关于红黑树，B+树，平衡树这些的文章吧，现在先给出这些遇到过的面试题）
4、红黑树在调整的时候，不是会用到左旋右旋吗？说说会不会出现无限左旋右旋的情况，如果不会，那最多旋转几次？
5、为什么索引能加快查找效率？
6、说说B+树是怎么分裂、合并的，知道具体步骤逻辑吗？
7、你项目用到redis，知道跳跃表吗？说说他是怎么实现的，查找时间复杂度？
数据结构这部分我觉得自己答的还行，几乎都答出来的，不过下面的Linux和操作系统有点惨，怪自己没准备，不过面试就是一个查漏补缺的过程吧。
8、Linux的proc目录有啥用？（忘了，，，，）
9、怎么查看端口的状态？（有条啥命令来着的，忘了）
10、怎么查看某个进程的状态？（也忘了，呵呵，，，，，）
我简历上是写着熟悉Linux常用命令，然而一个也没答出来，尴尬啊，其实我会用的是那些 ls, cp, mkdir, tar等常用命令，对于线程、网络相关的都不会，感觉危险了，这么基础的问题都不会。
11、说说什么是进程，进程包括哪些数据？进程切换的过程是怎么样的？
12、如果想要让多个线程执行到某个点，都达到之后再继续执行，可以用java的那些类来实现？（CountDownLatch和CyclicBarrier这两个）
13、什么是反射？反射有啥用？
14、说说垃圾回收，jvm是如何知道这个对象可以回收的？计数法有啥问题？如果我们想要指定某种垃圾回收算法，该怎么设置？
15说说aop（这个问的刁难了，我该说的都说），他说，那我也可以通过自己配置文件来实现这种切面啊，为啥就要用AOP呢？（他问的问题就相当于，我用servlet也能使用实现一个网站啊，为啥要用spring这些框架呢？我当时应该要吹一波spring中AOP带来的好处的，不过我没说，感觉自己应该吹一下的）
15、接着是问了我那个高并发秒杀系统的项目，说了里面的线程安全问题，然后我这个项目早忘光了，自己也没准备，代码我不是自己敲的，直接看视频的。自己没做过什么项目，就充当了，结果面试官问了一下线程的问题，我一直没get到点，搞的自己也好懵，最后才知道他说的是啥，不过项目这块答的也不好，主要自己也没动手弄过，又是去年快速看视频学的。
总体上，二面除了Linux答的非常非常不好，还有四次挥手说错了，线程包括哪些数据说的也不全之外，以及项目感觉有点被认识不是我做的之后，其它感觉还好。不过。一个多星期后，结果出来，挂了。
不过我也不意外，知道自己有很多需要补的，面试有时运气不好，可能连续问到好几个不好的，估计就得挂了，不过这没方法，最好的做法就是面试过后把自己不足的补上来。
常规网申的笔试题中是20道选择题+3道编程题，过几天就收到面试通知了，有了前面两次之后的面试经验之后，也了解到腾讯是特别喜欢问操作系统+计算机网络+Linux的，于是我把这方面的高频面试题都好好准备了，Linux 进程等相关都准备了，操作系统也大致准备了，下面说说这次涉及到的面试题。
1、说说网络建立连接之后是怎么关闭的（其实就是四次挥手，我详细说了，之前写过文章）。如果出现大量time_wait 状态的连接是怎么回事？（我说了第四次挥手出现了丢包、超时等），假如不会出现丢包、超时等，网络非常流畅呢？（说了短连接导致的）那怎么解决？（我说了限制最大连接，用队列来缓冲），问我还有其他方法吗？（我不大知道，好像面试官不大满意我的回答。不过最好的做法应该是修改 time_wait 等待的最大之间，把时间改小一点）。
2、说说IO阻塞与非阻塞是什么？各自有啥好处？知道多路复用吗？了解过 select 吗？说说他与 epoll 的区别。
我知道的也不是很深入，就常规答法，他问啥就答啥。这里我要说一下，我觉得很多人可能混淆了阻塞、非阻塞与异步、同步的概念。我实话，我觉得自己已经理解了，结果我看了好几篇文章，发现自己反而不懂了，懵了，总觉得缺了点什么影响我对阻塞非阻塞与异步同步的理解，说实话，我看了大概有10篇文章，有80%我觉得都没有说清楚阻塞非阻塞与异步同步的本质区别。这会影响你对同步阻塞，同步非阻塞，异步阻塞，异步非阻塞的理解。有时间我再来写一篇文章说说他们的区别，相信看了你就一定懂了。
3、知道乐观锁吗？说说他们适合应用的情景。
4、说说自适应锁，与其他锁相比，他的优缺点，什么情况下你觉得可以用自适应锁？（之前写过几种锁的文章，不懂的建议看）
5、你平时开发是在Linux上开发的吗？（我靠，Linux上开发？？那不是得对Linux上很熟悉？我虽然准备了Linux面试相关，可是这Linux上开发压根没体验过啊，我马上怂了，马上说没有，并且还加了我对Linux不熟，这门课刚学没几天。之后他就不问了Linux了，然后接下来我就扎心了）
6、那你平时就是在windows下开发了，那如果你平时项目要上线，这个项目的性能突然很差，你是怎么定位问题的？（我靠，在下从来没有上线过项目，连用心写过项目都没有，这下完，我迟疑了一会），他补充说，例如你可以通过观察你电脑的cup, 内存，IO 的指标来进行行定位，可以分析下吗？（可以打开任务管理器来查看cup等的运行情况，然后…..其实我没有上线过项目，也没有这样的经历），他说没事，假如遇到这种情况你会怎么分析？（我下面说一下我是怎么扯的）
心想，扎心了，其实我不大知道究竟要分析啥，好吧不管三七二十一了，然后我开始扯了：
1、如果cup一直很高而其他地方内存，IO很低的话，那很有可能项目里面有某些东西在疯狂运行，但却没啥用，很有可能就是自己设计了乐观锁，但竞争的线程太多，导致一直做无用功。
2、如果磁盘操作很高，但cup很低，这是意味着项目一直在做IO操作，很有可能是SQL语句写的不好，导致扫描了大量的磁盘，然后我就针对SQL语句的问题开始扯了，例如没有用上索引啊，选错索引啊，扯了一大堆，哈哈。（心想，舒服，刚好写过sql语句执行的很慢的原因有哪些）。
7、说说进程与线程的区别？进程有哪些通信方式，（我说了共享内存，消息队列，管道，信号量，套接字，信号驱动），他问还有吗？（我说其他的不知道了），描述下这些具体的通信方式（我有些具体的给忘了，大致描述了几个）
8、说说快速排序的思想，删除单链表倒数第二个节点，你会怎么做？
9、了解MySQL事务吗？说说ACID是啥（我靠，我对事务的隔离理解还强，研究过隔离是如何实现的，然而，，，我突然短路，ACID的D忘了啥，就像你高中那会对一首古诗背的很熟，然后突然就忘了哪句，心里有点扎心），那你具体说说ACID是啥（原子性是，，，隔离性是，，，，一致性？？？？？，我靠，我觉得自己对这四大特性很理解，感觉看名字就知道是啥了，然后说到一致性的时候，我自己的心中产生了疑问，感觉自己并没有真正意义上理解了一致性，然后我没说出来）
心中那个苦，一致性都没说出来，其实我是可以说出来的，但是我总觉得缺了点什么，就像你看了几篇文章觉得自己懂了，结果让你在看几篇文章，你感觉自己有点醒悟了，然后突然发现自己并没有真正意义上的懂，我查了好多篇文章，呵呵，千篇一律，都不能解答我的疑惑，说实话，别觉得自己懂了，其实你根本就没有懂，最后是懵逼了好久，才觉得自己应该是懂了，有时间也要写一篇事务的四大特性的文章。
说实话，网上的很多文章，真的是千篇一律，当你产生了疑惑，很难找到解答，因为你会发现，这几篇说的都是一样的，那个你感觉特别重要的疑惑都没有说到。好吧，不吐槽了，等下要被大佬门怼我写的文章了。
一面大致说了这么多，有些忘了。比起提前批一面，我觉得自己在表述上好多了，也会扯了，这里我想跟大家说的就是，问题就那些，一定要搞懂，延伸，要理解，该背的要背，例如进程有哪些通信方式。如果要面试腾讯的时候，计算机网络、操作系统，Linux这些底层的，要学好，尽管你是面试 java 岗位的，可能他一个 Java 的问题都不问的。
二面我应该就是个傻逼吧，自己给自己挖坑了，最近这些题一直在刷题，复习基础，对于数据结构，算法题，Java，操作系统什么的，自己也想看看有哪些不足，然后他一开始就叫我介绍项目。
1、说说你做的项目。
其实这期间我为了应付以后的面试弄过做过一个项目，不过还没弄好。然后我之前不是说了自己有个很水的高并发秒杀系统项目吗？我自己也没啥项目经验，然后我觉得高并发也是很牛逼的样子，就打算用它了，简历上也写了。不过这个项目我自己没实操过，看视频的，很短，几个小时而已，用到了redis等，不过我已经准备了很多redis相关的知识了，怎么优化的也准备好了。
现实是，呵呵，我被怼的体无完肤。
优化之一就是通过减少事务持有锁的时间来优化的，例如我们秒杀一个物品的话，如果减库存和插入订单两个操作都成功的话，代表秒杀成功，这两个操作会在一个事务里完成。问题来了，是先减库存呢？还是先插入订单呢？
我说了先插入订单在减库存能够减少事务锁的持有时间，然后我就被面试官怼死了，如下：
面试官：你觉得你这个优化有用吗？
我：有啊，可以减少锁的持有时间（确实可以减少锁的持有时间）
面试官：那你说说提高了多少并发量？
我：这个，，没测试过（我是看视频的，自己也没有这样的测试工具，有点尴尬，连测试过都没有？？）
面试官：那你说说这条事务执行需要多少时间
我：我，，好像忘了具体数据，大概是0.00几秒吧。
面试官：你自己都说0.00几秒了，这么短时间，你觉得你的这个优化，用处大吗？有数据来支撑下吗？
我：,,,,，（真的自己给自己挖坑了，早知道随便介绍下就好了，不主动说自己的优化了过程了，毕竟自己没实操过）
面试官：你这个系统能扛多少并发量？
我：…没测试过（我觉得，面试官觉得这个项目是假的了，可能觉得我是从网上随便找的，然后来应付面试的，我觉得自己凉了，欺骗可是非常严重的）。
面试官：那你说说，完成一条请求用了多少时间（测试最大的并发量可能需要相应的工具，他可能为了再次确认我的真伪，故意是一条请求的？这样就不需要工具了）
我：…..没测试过（好吧，我的心已凉）
面试官：好吧，就说到这里，你用过lowJS吗？
我：啊？？lowJS，什么鬼东西？而且他的声音有点小，我再次确认，是指lowJS吗？他说是，我说没听说过（后来才知道，他说的是Node.js，，，，，，麻痹，，，）。
面试官：你还有啥问题要问的？
呵呵，，，已经凉了，这次面试真的是自己给自己挖坑，面试官肯定是知道我项目是伪造的，这是非常严重的事情，然后这个面试大概是持续了10几分钟，其他的面试官的也没问了。想找给人吐槽下自己。
然后，明天就查到挂的信息了，之前二面是一个星期多才查到挂了，这次是十二个小时之后就收到挂了，我也知道10000%挂的了。此刻需要一波安慰！！
总结就是一首凉凉送给自己，还有就是有一些建议，当然，这也是我自己给自己的建义。
1、高频面试题，别停留于表面，大家都懂，说的很表面没啥优势。
2、别以为自己懂了，如果可以，最好自己尝试描述一下，你可能会描述的很没有逻辑。
3、好好准备一个项目吧，一定要自己脚踏实地做一下， 别像我，被怼的体无完肤。
4、框架真的问的很少，好好打基础，数据结构与算法，计算机网络，操作系统，Linux 进程等相关的命令。
5、面试的第一关是笔试，一般都是编程题，建议要刷刷题，不然面试的机会都没有。
先写到这里了，后面会写一下面试相关的题，建议最后看，虽然你看过相关文章了，但看我的，可能你也能够有新的收获！还有就是祝各位大佬面试顺序，不好的运气我来帮你们包揽就行了（留下了委屈的眼泪）
校招之路",
校招简历模版,"今天我们就来聊一聊在校招时，简历该如何写的问题。说实话，对于简历的书写方式，可能不同的人会有不同的见解，并且不同的面试官/HR在筛选的时候也会有所差异，所以在我看来，不存在一种绝对稳的简历模版。
我在之前校招时也问过很多过来人关于简历的问题，并且我也认识不少当过面试官的大佬，当时也都叫帮忙修改过简历，今天我就根据自己的经验以及大佬们的建议，跟大家说一说简历该如何写，或许可以给你带来一些有益的参考。

  最后也会给出我自己参加校招时的简历模版 + 大佬们参加校招时的模版

先来回答一个问题：简历是写一页好还是两页好呢？
对于这个问题，可能你的师兄师姐会告诉你，最好写一页，面试官没那么多时间去看简历；也有人会告诉你，最好写两页，毕竟我们没拿过什么大奖，只能在简历上多点自己会的东西。
我的答案是，一页两页都可以，只要你把想要表达的东西都表达出来了，那么就可以了，但是不建议第一页写不下，第二页只写了 20%，然后其他留空白，个人建议最好不要留空太多。
简历里该有哪些东西？
对于校招生来说，简历里无非就个人背景、教育背景、基础技能、项目经历、个人荣誉、自我评价这几个模块，其中最重要的就是基础技能和项目经历这两个模块了，所以本次也重点讲下这两个模块的书写。
对于想要进大厂的同学来说，基础知识的掌握无非是最重要的一个点，因为大厂更看重你未来的可塑造性，而扎实的基础，便是一个很重要的证明。有人可能会问，什么是基础知识？
基础知识说来说去无非就是我们大学所学的那些课程，例如数据结构与算法、计算机网络、操作系统、数据库、Linux等等。
我看过好多人的简历，很多人在写基础技能的时候，基本都是写的很「简洁」，例如写计算机网络的时候，简历上就单单写了这一行字：掌握计算机网络。
说实话，计算机网络所包含的知识太多了，如果你不是多牛逼的人，我这里是建议大家在写基础技能的时候，写详细一点，例如把你掌握的一些协议写出来：
熟悉 OSI 七层模型和 TCP/IP 四层体系分层结构，掌握常见网络协议，如 ARP、ICMP、TCP、UDP、DNS、DHCP、https 安全工作原理等。
你把这些罗列出来，给人的感觉就是你好像真的掌握一样，并且也方便面试官挑选问题来询问，正常情况下面试官都会挑你懂的技能来问你是不是真的懂，而不是专门找一些简历里不存在的冷门知识来问你。
所以在写基础技能的时候，我建议大家，写的详细一点，把你自己掌握，想要被面试官问的知识罗列出来。
例如你懂数据结构与算法，那么千万别只写「掌握数据结构与算法」，可以把你觉得自己掌握的还不错的算法写出来，例如我就是这样写的：
扎实的数据机构与算法，例如掌握栈、队列、链表、二叉树、图、排序算法、递归、动态规划、分治、回溯等。
因为大家都学过数据结构与算法，可能大部分人都简历里都写着掌握数据结构与算法几个字，具体是掌握多少，不同的人是天壤之别的。
所以呢，在校招的简历上，如果你没有什么比较牛逼的，拿到出手的经历，那么我建议你一定要在基础知识这个方向上下功夫，写的时候尽量详细点，给大家截图下我简历上写的（我的简历是 1 页的，所以力求简洁）

我在秋招那会，面试官问基础技能时，也大部分从我的简历上有列举的知识进行提问，然后延伸。这里需要强调的是，简历上写出来的，一定自己要懂。之前我 Linux 的一些命令写在简历上，结果被面试官一问，特么我刚好那个命令还真没用过，把我尴尬死了。
之前我看过几个要参加春秋招小伙伴的一些简历，经常看到这样的情况：
1、有些人在写项目的时候，项目背景说了一大堆，然后自己做了什么，却是一笔带过，我竟无法从他的项目经历中找出他究竟做了啥。
2、也有很多人问我，自己没有实习项目或者没有真实的线上项目怎么办？
对于校招生来说，其他很多人项目都接触的比较少，并且很多大公司在这方面也不会对你要求太苛刻，所以我觉得，对于一个项目最重要的不是这个项目有多高大上，而是你在这个项目中自己做了什么，用了什么技术解决了什么问题。
并且对于一个项目，我们也可以做一些适当的包装，然后自己准备好相应的面试题，例如你的项目是跟着视频做的，如果觉得自己掌握的不错，其实也是可以包装成自己的实习项目。
在写项目的时候，比较重要的几个点就是：
（1）、使用技术：把自己在项目中用到的技术写出来，例如是否用了 redis，还是用了 spring，springcloud 等等。
（2）、简洁介绍下项目：我猜大多数人的项目都是比较简单的，所以在介绍的时候，可以简单介绍了项目的功能、背景之类的，这方面别写太多。
（3）、我的职责：我觉得这个是最重要的，就是你干了什么，用了什么技术解决了什么问题，并且面试官大概率会从你解决的这些问题中问你问题。例如当时我在项目中就说了用 redis 来充当消息队列，解决异步问题，然后自己也准备的相关的面试题，之后面试官刚好就这个消息队列的问题问了挺多，然后就……
也就是说，在写项目的时候，用到的技术，以及是自己做了什么，解决了什么问题，是最重要的一部分吧，因为简历就是用来展示我们自己的，所以必须要让面试官看到我们会什么，做了什么。
如果你有获得什么好的证书或者比赛，那么可以在这一栏中写进去，例如你的英语六级成绩好不错，那么可以把自己通过六级考试这个事情写进去。但是如果你像我一样，只考了四级，并且四级成绩还贼差，那么就不建议把四级写进去了，因为通过英语四级这个事情，是个本科应该大部分都有这个要求？所以还是不写吧。
还有那些你参加过一些社交活动啊，知识答辩这些证书啊，也没必要写了。写上去的那些荣誉证书啥的，建议和你的专业挂钩，例如你拿到软考高级证书（中级没啥含金量，当然要写也可以），你在学校参加 ACM 拿过奖，自己在网上参加比赛拿过的奖等。
很多人都会在最后来个自我评价，并且大部分人有写和没写一样，因为他是这样写的：
1、本人热爱编程，喜欢学习，喜欢看书，喜欢分享。
2、喜欢探索、喜欢挑战。
说实话，我觉得这些写了和没写一样，因为凡是个人都具有这样的特性，所以在自我评价这一个模块，如果你有写的话，我建议你写具体点。
例如，你说自己喜欢看书，可以顺便举例下看过的一些书；你喜欢分享，可以说下自己写了多少篇文章；喜欢学习，可以说一说你经常去那些社区，例如 csdn，博客园，stackoverflow。
如果你的简历已经写好了，那么可以根据我这篇文章看看有没有可以改进的地方，如果你的简历还没写，或者想要找个简历来参考，那么我这里也准备了两份简历，一份是只有一页的 Java 后台开发岗位的，一份是两页的 Linux/C++ 岗位的。大家可以关注我的微信公众号

在这个公众号回复「简历」，即可获取 word 版本的简历。
最后，也欢迎大家在简历这方面进行补充，毕竟每个人的见解都不尽相同，我给出的这些建议也并非最优，可能对于经验比较少的你，或许可以给你作为一种参考勒。
校招之路",
笔试得刷多少道题才稳？,"想要学习算法、应付笔试或者应付面试手撕算法题，相信大部分人都会去刷 Leetcode，有读者问？如果我在 leetcode 坚持刷它个 500 道题，以后笔试/面试稳吗？
这里我说下我的个人看法，我认为不稳。下面说说为啥不稳以及算法题应该如何刷、如何学才比较好，当然，也会推荐自己学过的资料。
在刷 leetcode 的时候，你会发现，每道题的题意都很短，你只需要花十几秒的时间，就知道这道题是要你干嘛了，并且每道题所用道的算法思想都很明确，动态规划、递归、二分查找等，你可能很快就知道该用哪种方法，只是你不懂如何把代码写出来而已。
而在笔试中是完全不一样的，在笔试中，大部分题目都是情景题，可能读懂个题目都需要花不少时间，偶尔还会遇到不大知道题目要我们干嘛，而且有时间限制，估计每道题给你分配的时间是 30 分钟。这里我随便扔一道题给大家看看（Shopee去年的真题）

并且你可能不容易看出来，这些道题该用什么方法好，有可能是多种方法的结合（当然，不是指这道题哈）。
也就是说，在 leetcode 中，hard 级别的题做的出来，而在笔试中 medium 级别的，由于时间、心态等因素的影响。你可能还做不出来，当然，大佬除外。下面说一说题型的一些题型以及如何学习算法会好应付点。
在笔试中，我认为主要有如下几种题型：
1、基本数据结构的考察：这类题我觉得是比较简单的，主要考场基本数据结构的操作，例如二叉树的层序遍历，链表的逆序等，当然，它不会直接告诉你，让你来逆序或者遍历。例如

2、某种算法思想的掌握：这类题你掌握了某种算法思想，就会比较容易，如果不懂，那就凉凉了。例如动态规划、回溯、枚举、深度/广度、贪心、二分等。其中，我觉得动态规划考的挺多，还要就是 回溯+深度/广度。例如
所以，常见算法思想，一定要掌握。
3、边界条件的考察：这类型的题，估计你一看就有思路，知道该怎么做，但是，它的边界条件特别多，需要分很多种情况来讨论，特别容易出错，有时候会让人陷进去，越做越复杂，这类题主要考场你的思维严谨程度。例如

4、找规律、数学公式：这类型的题，主要是根据数据之间的一些关系，来找一些规律，进而推出他们的通用公式，就像我们高中时，找数列的同项一样。例如

上面说了笔试题的一些情况，也说了主要考察的一些题型。针对这些题型，我觉得在刷题的时候，你要做好下面几件事。
归纳？总结？估计大部分都知道归纳、总结这么一回事，但是，有没有去实践我就不知道了。
（1）、数组和相关题型
对于算法题，还是有很多种题型需要去总结的，如果你懂这个题型，以后遇到类似的题，相信很快就能做出来的。有哪些题型可以总结呢？答是非常多：例如

  （1）、给你一个非负数的数组，求最大子数组和的长度

这算是一个题型，关于这个题型，有很多种变形、拓展，这里建议一起归纳总结，例如

  （2）、刚才给的数组是非负数的，现在变一下，给的数组是可正可负。

还能继续拓展吗？答是可以的，例如

  （3）、给你个矩阵（即二维数组），求最大子矩阵和的面积

还有吗？有，例如刚才是求最大和，现在我改成求最大乘积。
我举上面这些例子，就是想告诉你，对于前期的学习，我建议分类刷题，总结题型，像我上面举的这些例子，在笔试/面试中还是比较常见的，如果你懂得对应的方法，就可以秒杀了，因为这类题，没啥边界或者规律。例如我刚才距离的Shopee的零食柜那道题，实际上就是数组切割题型，相当于给你一个数组，让你切割 n 下，那么可以把数组切割成 n + 1 个子数组，怎么样切割，才能让最大子数组的和最小？
关于题型的，还是很多的，我这里无法一一给你列举，只能靠你刷题的过程中，进行分类、总结。不过我可以给你推荐一些资料，后面推荐哈。下面我在说一些题型吧。
（2）、基本数据结构操作相关题型
刚才我说了，笔试题的考察，有一类题是基本数据结构的考场，而且，这类题在面试中，也是高频考点，在笔试中，倒不是很高频。对于这类题，我觉得你愿意去总结，那么以后遇到，问题不大。例如
链表的各种操作：逆序（部分逆序、按某种条件逆序）、判断是否有环，环的入口节点、删除指定节点等。
二叉树的各种操作：各种非递归的遍历操作（前中后、层）、二叉树的公共祖先、根据前中后的遍历结果来重构二叉树等等。
队列、栈相关操作：最小栈、来队列来实现栈等。
（3）、字符串相关问题
不得不说，字符串相关问题，估计考的最高频，而且，我可以告诉你，对于字符串相关问题，90% 可以用动态规划来解决。反正对于字符串问题，我一般想法就是能否套用动态规划，字符串问题有点多，不过你有时间，建议总结。例如：通配符的匹配、最长公共子串、最小编辑代价、最长回文串等等。大部分都是用动态规划，而且，我觉得解法都差不多，所以强烈建议专门花一段时间来做、总结、归纳。后面我也会写这方面的算法文章，敬请期待。
（1）、边界、找规律题型
刚才我说有一类题型是边界特别多的，对于这类题，我觉得不好总结，这类题考察你逻辑是否严谨，能否化繁为简。这里我建议多做几道，做的时候，多自己思考，千万不要觉得自己知道思路，自己怎么写，只是情况太多，懒的写，直接看别人的答案，这样子，这道题你做了价值不大，因为这类题就是考察你思维完整性的，最好是自己做，可能你用了 十几个 if 语句，没关系。接着你可以把你的 if  语句进行化简，查找他们的共同点。最后你可以看大佬们的做法，你的收获会更大！
对了，也千万别急着动手写，应该想一想可行性，不然你容易陷入无底深渊。
对于找规律的题型也是一样，这类题最后别急着看答案，应该多思考，多做几道，做多了，你的思维会越来越灵敏，以后看到这类型的题，可以很快有思路。
所以，对于这种边界、规律题，个人感觉总结的价值不是特别大，更多的是多思考，多动手。

  注意：每道题，我们都要追求最优解哈，别觉得 ac 了就完事了。

上面说了那么多，可能有人是道理我都懂，可我还是学不会，说实话，学习的方法有很多，每个人的学习方法也都不一样，我这里也只是提供一种参考。但是，无论什么方法，你不去动手执行，那么，一切都是空话。
这里我推荐一些我看过的书，感觉挺不错。

  文中涉及到的书籍，在这里就可以下载：计算机书籍免费下载（高清带目录完整PDF版）

计算机书籍免费下载（高清带目录完整PDF版）
1、书籍推荐
刚才我说了很多种题型，对于按题型刷题总结，首推《程序员代码面试指南：IT名企算法与数据结构题目最优解》，这本书真的挺不错，大部分题型都总结了，而且每个专题有十几二十道，这里建议大家买本来学习。
还要一本我大一看的，感觉也挺不错，叫做《挑战程序设计大赛》，不过这本比较适合不急着面试的吧，这本不像上面那一本，专门来总结各种题型应付面试。
《编程之美》、《编程珠玑》也建议看，这两本我觉得比较有趣，不是说让你一直刷题一直刷题，这两本你可以买来看看，会给你带来一些思路，这两本我是只看，没动手打代码。
Leetcode 刷题的时候，也是可以分题型刷滴，所以也可以去 leetcode 刷题，不过刷题的时候，我这里有个建议，就是别在本地 IDE 写代码，直接在网页端写就行了。因为面试的时候，一般就让你在记事本写代码，不会给你 IDE。如果你不习惯，估计很容易写错代码，而且，有些库函数你也把名字忘记了。网页端其实也是挺方便的，也会有一些代码提示。

  对于，对于连各种算法思想、数据结构都还不懂的同学，上面的数据不大合适哈，推荐我看过的两本书《数据结构与算法分析 — C 语言描述版》、《算法设计与分析基础》（这本代码实现是用伪代码的）。

2、视频推荐
说时候，我视频看的不多，对于算法的学习，特别是刷题，我是不大习惯看视频，如果你想看视频，我觉得牛客网的算法视频还不错吧，我没过几集，分初级班和进阶班，可以这里下载：牛客网算法第四期，其他的我也没看过，所以这里可以推荐的不多
牛客网算法第四期
回到标题，leetcode 刷 500 道题稳吗？说实话，你能坚持刷 500 道题，说明你的能力还是挺强的，但是对于笔试，我觉得不一定稳，得看你怎么做，例如是否追求最优解，是否进行总结归纳，还是说你只是暴力 ac 了之后就不理了，或者不敢跳出舒适区，老是做那些比本来就比较擅长的题目，而遇到自己弱的题目，马上就看答案了。而且我说了，有些题是找规律或者边界很多的，这类题需要你多思考、动手，不是说我多刷几道就可以了。
总之，对于刷题，千万别追求数量！
校招之路",
以过来人的角度聊一聊我艰辛的面试之路,"大家好，我是帅地，今天主要和大家聊一聊自己当时的面试准备以及一些面试心得，最后也给大家准备了一些珍藏已久的资料。
记得去年的这个时候，帅地基本每天都在做各大公司的笔试题，很多笔试题，是真的难，为此我也写了一篇文章：leetcode 刷500道题，笔试/面试稳吗？谈谈算法的学习
leetcode 刷500道题，笔试/面试稳吗？谈谈算法的学习
有些人，手里已经好几个 offer 了，而有些人，笔试受挫，面试受挫，自己明明复习了那么久，学习了那么多，特么在笔试就被刷了，有些甚至连笔试都不给，好不容易进入面试环节，自己明明每个问题都回答出来了，但一查状态，才发现自己进了人才库…
有人可能忍不住会问，双非本科还有机会拿到大厂 offer 吗？
我的回答是，完全有机会。
说到卡学历，我觉得一些中厂比大厂更喜欢卡学历，对于很多大公司来说，基本都会给你笔试的机会，而能不能获得面试的机会，笔试的成绩真的很重要，如果你学历不好，简历也没获得什么大奖，那么这个时候，你的笔试成绩，就尤为重要了。
一般很多大公司，在提前批基本都是 3 ～ 5 道编程题，如果你能做出 60% 的笔试题，那么被发起面试的概率还是挺大的。当然有人可能会说，我特么全 A 了，但还是没收到面试的机会，这又是怎么回事？
说实话，确实，有些公司真的会卡学历，我记得我有次做贝壳找房的笔试题，全 A 了，但还是没有给面试的机会，爱奇艺笔试机会都没给。
但是，由于我笔试做的还不错，大部分公司还是给了我面试的机会，我的简历其实也一般，所以我觉得，如果你笔试做的还不错，就算你是普通本科，还是会有很多大公司愿意给你面试的机会的，毕竟，很多大公司，都不想错过才人。但一些中公司，可能反而不给你面试的机会，直接卡你学历，因为，面试的成本，也挺高。
笔试一直被虐怎么办？
这没办法，现在很多公司处于提前批状态，提前批就是神仙打架，笔试/面试的难度，都会比正式批难，而且提前批大佬贼多，所以就算笔试/面试受挫，大家也不要太灰心，因为，提前批是真的难，反正我是体会过提前批的笔试题了。
提前批被虐了之后，到了正式批就积累了不少经验了，而且很多大佬也已经拿到 offer 了，这个时候 offer 的数量虽然少了挺多，但是，我觉得反而比提前批更加容易拿到 offer 了。记得当时，我的很多同学，基本也是在八九月份，一个 offer 也没有，好些人都想放弃秋招等春招了，但到了十月份，offer 就莫名着陆续来了，好多同学，熬到了十月份，最后也都在十月份拿到了 offer。
所以，我希望，大家不要灰心，应该要不断总结，不断弥补自己的盲点。对于还没有参加校招的同学，也要好好准备下笔试，努力把算法题刷一刷。
作为一个应届生，从春招到秋招，体验了 n 场面试，但说实话，问来问去，每次面试都会问那十几个问题，有些问题，我都回答腻了，例如讲一讲索引，进程与线程的区别…，这些问题，都我回答了几十遍了…
我相信很多人也都会提前早早准备这些问题，例如三次握手，四次挥手，进程通信，垃圾回收，链表反转，等等。
我想，面试官，应该也都知道你们可能都会背诵/默写了吧，可是，他们依然还是会问你：进程的通信方式有哪些？
可是，这些熟悉到能够背诵的问题，当面试官问你的时候，你能让这些问题成功你的加分项吗？
说实话，我认为很多人不能，这些简单/百问不厌的问题，我花了很长时间去研究，因为这些问题被问的概率太大了，我不能和大家一样：当面试官问我进程有哪些通信方式的时候，我熟练着跟面试官说：
1、管道
2、消息队列
3、共享内存
4、信号量
5、Socket
…
直接说出了五六种，松了一口气，心想：幸好没忘。然后就没了。
说实话，这样的回答，我觉得，很多人都能够回答出来吧，我猜应该也有挺多人是死记硬背的，这种回答，很难成为加分项。
我就认识一些人，跟我说，面试官问的，基本都有回答了，但过了几天，收到了简历进入人才库了。
虽然面试官问的，都能回答出来，但不见得你真的回答好了，这些基础的问题，在不同的人手里，回答出来的，真的会很不同。
我的项目经验比较不好，学历也一般，简历也普通，我的优势就是扎实的基础 + 算法，所以，我对这些常见/高频面试题，基本都会去研究一下，绝对不会和绝大多数人回答的一样，我一定要想办法让我的回答成为加分项。
例如，当面试官问我进程通信的时候，我不会直接回答出这五种通信方式，一个会尽量把这五种进程方式给串联起来，例如像我写文章的这种方式回答：记一次面试：进程之间究竟有哪些通信方式？—- 告别死记硬背
记一次面试：进程之间究竟有哪些通信方式？—- 告别死记硬背
当面试官让我说一说MySQL 索引的时候，我可能会由浅入深，从索引的数据结构选型，到索引失效的本质原因，把这些逻辑连贯起来，一层推一层着跟面试官讲…
如果你之前看过我的原创技术文章的话，可能会发现我的文章，并不会硬巴巴着抛出一个概念，然后跟你讲解这个概念是什么意思，而是会从最简单的说起，一步步推出下一个知识点。
是的，我面试的时候也是这样，基本面试官问我这些常见的问题，例如数据库索引啊，锁啊，事务啊，计算机网络的 https，三次挥手四次握手，icmp等啊，还是数据结构等调表，B/B+ 树啊，我基本都会按照自己的理解，从 0 到 1，一层层推理出来跟面试官讲。
而这，也是我面试的优势，当然，当面试官问我项目的时候，由于本人确实没怎么做过项目，基本没有从 0 到 1 做过的项目，都是看视频速成的，所以项目是我的短板，这也是我一定要把基础题回答好的原因，我要让面试官看到我是一个值得培养的人。
线程和进程的区别，这个问题简单吗？你被问过几次？
说实话，我为了回答好这个问题，为了让自己和大部分已有的回答模版不一样，我找了好多资料，也看了好多文章，重新翻开了操作系统，了解他们的本质区别，但依然还是回答的不是很满意…
说这么多，其实我就是想告诉大家，对于一些经常被问到的问题，大家可能也都准备好了回答模版，但是，如果你只是简单的回答，和大部分人的模版一样，那么，觉得面试官问的，虽然你大部分都回答了，但可能回答的并不深刻，所以就算回答了，可能也会被刷，因为其他人也像你这样回答了，而有些人，却回答的很优秀。
所以对于那些高频面试题，最后深入研究一下，总结一套自己的回答模版，让这些百问不厌的面试题成为你的加分题！
校招面试",
读者问答—关于春招的几个问题,"前几天我在视频号做了一场直播，直播过程以及直播过后，不少小伙伴都咨询了我校招相关的问题，其中不乏迷茫，没准备好，要不要参加春招，该如何复习，面试都问什么…等等。所以这篇文章，帅地采用自问自答的形式来回答几个共性问题，如果你还是在校生，或者刚毕业不久，或者想要参加面试，那么可以看一看。
这些问题我先汇总一下，方便你们根据问题查找对应的回答。
1、春招面试官都会问什么？
2、春招开始了，我好多还没有复习，要不要先不参加春招，全力准备秋招？
3、面试问项目，我没有实际的项目经验怎么办？
4、春招暑假实习，留言转正的概率大吗？
5、之前算法题刷的很少，眼下算法该如何准备？
6、目前在一家外包公司实习，不过学到的东西不多，是要继续实习还是辞职全力备战春招？
7、笔试好难啊，有什么技巧吗，有人作弊吗？
8、之前有过实习经验，我不参与春招实习了，全力备战秋招可以吗？
无论是春招还是秋招，基本都是问算法+基础知识+项目+语言相关，下面我详细回答下各种知识点，方便你准备
（1）算法题：面试算法题其实问的不是很多，可能总共就问个两三道（字节跳动除外），并且问的难度都不难，感觉就 leetcode 中的 easy 和 medium 难度吧，并且很多都是原题。
（2）基础知识：一般就问计算机网络会多一些，然后就是操作系统和 Mysql，其实计算机网络问来问去就那几个问题，大家可以多看看，操作系统就更加死板了，就那几个，至于是哪几个？牛课网去看看面经总结下就好了，至于 mysql 的话，索引是重点。
（3）项目：我觉得春招实习，项目问的还是挺多的，甚至比秋招还要多，所以大家一定要亲手做一个项目，一般面试官会根据你项目涉及到的技术栈，问你一些相关的问题，例如你用了 redis，那么会问你 redis 啥的，还会问你如何优化之类的。
（4）语言相关：一般就Java，C++，Go，Python 这几门，你学哪一种，和面试官说下就好了。如果你是学 Java 的，那么多线程，哈希表，垃圾回收，这些就要注意了。
别问，问就是一定要参加春招实习，哪怕你啥也没准备，一定要把春招作为练手，拿不拿的到 offer 倒没关系，至少可以涨一波经验，这会在秋招，给你带来非常非常多的帮助，因为你会发现，面试问来问去就哪些问题，面多了，在一次又一次的总结之后，回答起来会变的很有逻辑。
有人可能会说，我不参加春招，我准备好之后再参加日常实习中，也可以涨面试经验啊？
个人认为，日常实习和春招还是有区别，春招会比日常实习难，而且春招非常非常贴近秋招，所以我还是建议你去参加春招，如果还没有准备，如今最重要的就是，先写好一份简历，然后去各大官网网站投递。
不需要公司的真实项目，你的对手也大部分是没有真实的线上项目的，自己随便找个项目做就可以了，现在不是有很多培训班的免费视频吗？你可以去找一个来做，也可以去慕课网，牛客网这些，付费几百块钱，找一个来做，也就几百块，投资下自己，还是非常值得的。
如果你对应的技术栈学习了，其实全力以赴，一个星期就可以跟着视频，做完一个项目，剩下的就是面试过程不断被虐，然后不断涨经验，不断变强。
首先，我想说的是，不管概率大不大，你都要一边准备秋招，是的，一边实习，一边准备秋招，到时候还得一边实习一边偷偷面试，手里多拿几个 offer，总归比较放心。
至于转正概率？我认为还是挺大的，每个公司的概率不一样，具体还得看公司招了多少实习生，秋招有多少 HC 分给了实习生，像今年腾讯招了 8000 实习生，那转正概率肯定比去年低。
总的来说，按照往年的一些数据，我觉得转正的比例有 1/2～1/4。
如果春招来不及准备了，大家可以在面试之前，把一些简单且高频的算法面试题撸几遍，例如这几道：快速排序，归并排序，希尔排序，链表反转，指针指向链表的中间节点/倒数第二个节点，两数之和，还有几道简单的 DP 问题：例如 不同路径（leetcode 62题），最小路径和（leetcode 64题）。
并且一遍把剑指offer 刷个两三遍，如果你没刷过剑指 offer，可能是来不及刷了，但是可以为秋招准备。
我先说一件事，就是无论你是否继续实习，都要先去投递简历，参加春招，先看看自己被发起面试的概率大不大。
假如你已经实习了几个月，也算有点实习经验了，并且觉得自己能够静下心来复习，我觉得离职出来全力准备春招/秋招也是可以的，但是如果你刚入职，并且实力/学历都很一般，那么还是可以一边实习一边先工作一两个月再离职出来全力准备秋招。
我跟大家说的实话，在春秋招的笔试中，确实挺难，有很多人都是组队一起做的，在牛客网做编程题的实话，是可以切换屏幕的，也就是说，可以从浏览器切换到别的软件应用，这个时侯，是可以做一些手脚的。虽然有摄像头，但是摄像头死角太多，也就是说，笔试作弊的人还是挺多的，而且好多还是同一个实验室的人。
关于笔试作弊这个事情，如果被发现，后果 还是挺严重，之前我们那一届，就有好几组人，腾讯笔试时，被发现了，直接被腾讯拉近黑名单了，因为诚实这玩意，太重要了。
但是，帅地想说的是，大家好好把握，帅地其实也作弊过，但是我不是团队的，我是自己一个人，团队最容易的就是，代码相似度太高，容易被检测出来，有人可能会说，自己一个人也能作弊？我只能说，自己好好研究吧，作为一个博主，在这里倡导大家作弊显然是不对的，我还是建议大家别作弊，你们自己好好体会，好好研究属于自己的方法论吧，这个方法论，也可以为了秋招笔试而研究。
假如你之前有去过不错的公司实习过，并且春招没有拿到大厂实习 offer，我觉得是可以全力备战秋招的，好好补充自己薄弱的环节，直奔秋招提前批（七月份就开始了），但是，还是那句话，一样可以去投递下简历，以放松的心情去参加下面试/笔试。
上面这些问题，是很多读者在微信问了问题之后，我总结提炼出来的共性问题，希望可以给还处于迷茫的你的一个参考。
另外，帅地创建了一个校招群，你们可以进群，但为了减少我的工作量，你们要按照规则来，不然我可能不会邀请你。这里我强调一下，进群之后一定要看群公告，一定要看群公告，一定要看群公告，否则被误踢别怪我。
帅地会在这个群里发一些校招相关的资料，内推等等。
如何进群？

扫码添加我的企业微信，通过好友请求之后，向我发送「校招」，进群之后，大家一定要看群公告哈。
校招之路",
